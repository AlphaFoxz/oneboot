/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.records;


import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.PsysAuthUser;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.pojos.PsysAuthUserPo;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;
import org.springframework.lang.NonNull;


/**
 * 用户表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsysAuthUserRecord extends UpdatableRecordImpl<PsysAuthUserRecord> implements Record8<Long, String, String, String, Long, Long, Boolean, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>preset_sys.psys_auth_user.id</code>. 主键
     */
    public PsysAuthUserRecord setId(@NonNull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>preset_sys.psys_auth_user.id</code>. 主键
     */
    @NotNull
    @NonNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>preset_sys.psys_auth_user.username</code>. 用户名称
     */
    public PsysAuthUserRecord setUsername(@NonNull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>preset_sys.psys_auth_user.username</code>. 用户名称
     */
    @NotNull
    @Size(max = 50)
    @NonNull
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>preset_sys.psys_auth_user.password</code>. 密码
     */
    public PsysAuthUserRecord setPassword(@NonNull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>preset_sys.psys_auth_user.password</code>. 密码
     */
    @NotNull
    @Size(max = 60)
    @NonNull
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>preset_sys.psys_auth_user.nickname</code>. 昵称
     */
    public PsysAuthUserRecord setNickname(@NonNull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>preset_sys.psys_auth_user.nickname</code>. 昵称
     */
    @NotNull
    @Size(max = 50)
    @NonNull
    public String getNickname() {
        return (String) get(3);
    }

    /**
     * Setter for <code>preset_sys.psys_auth_user.subject_id</code>. 主体id
     */
    public PsysAuthUserRecord setSubjectId(@NonNull Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>preset_sys.psys_auth_user.subject_id</code>. 主体id
     */
    @NotNull
    @NonNull
    public Long getSubjectId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>preset_sys.psys_auth_user.account_id</code>. 账户id
     */
    public PsysAuthUserRecord setAccountId(@NonNull Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>preset_sys.psys_auth_user.account_id</code>. 账户id
     */
    @NotNull
    @NonNull
    public Long getAccountId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>preset_sys.psys_auth_user.enabled</code>. 是否可用
     */
    public PsysAuthUserRecord setEnabled(@NonNull Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>preset_sys.psys_auth_user.enabled</code>. 是否可用
     */
    @NotNull
    @NonNull
    public Boolean getEnabled() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>preset_sys.psys_auth_user.expired</code>. 是否过期
     */
    public PsysAuthUserRecord setExpired(@NonNull Boolean value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>preset_sys.psys_auth_user.expired</code>. 是否过期
     */
    @NotNull
    @NonNull
    public Boolean getExpired() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row8<Long, String, String, String, Long, Long, Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    @NonNull
    public Row8<Long, String, String, String, Long, Long, Boolean, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    @NonNull
    public Field<Long> field1() {
        return PsysAuthUser.PSYS_AUTH_USER.ID;
    }

    @Override
    @NonNull
    public Field<String> field2() {
        return PsysAuthUser.PSYS_AUTH_USER.USERNAME;
    }

    @Override
    @NonNull
    public Field<String> field3() {
        return PsysAuthUser.PSYS_AUTH_USER.PASSWORD;
    }

    @Override
    @NonNull
    public Field<String> field4() {
        return PsysAuthUser.PSYS_AUTH_USER.NICKNAME;
    }

    @Override
    @NonNull
    public Field<Long> field5() {
        return PsysAuthUser.PSYS_AUTH_USER.SUBJECT_ID;
    }

    @Override
    @NonNull
    public Field<Long> field6() {
        return PsysAuthUser.PSYS_AUTH_USER.ACCOUNT_ID;
    }

    @Override
    @NonNull
    public Field<Boolean> field7() {
        return PsysAuthUser.PSYS_AUTH_USER.ENABLED;
    }

    @Override
    @NonNull
    public Field<Boolean> field8() {
        return PsysAuthUser.PSYS_AUTH_USER.EXPIRED;
    }

    @Override
    @NonNull
    public Long component1() {
        return getId();
    }

    @Override
    @NonNull
    public String component2() {
        return getUsername();
    }

    @Override
    @NonNull
    public String component3() {
        return getPassword();
    }

    @Override
    @NonNull
    public String component4() {
        return getNickname();
    }

    @Override
    @NonNull
    public Long component5() {
        return getSubjectId();
    }

    @Override
    @NonNull
    public Long component6() {
        return getAccountId();
    }

    @Override
    @NonNull
    public Boolean component7() {
        return getEnabled();
    }

    @Override
    @NonNull
    public Boolean component8() {
        return getExpired();
    }

    @Override
    @NonNull
    public Long value1() {
        return getId();
    }

    @Override
    @NonNull
    public String value2() {
        return getUsername();
    }

    @Override
    @NonNull
    public String value3() {
        return getPassword();
    }

    @Override
    @NonNull
    public String value4() {
        return getNickname();
    }

    @Override
    @NonNull
    public Long value5() {
        return getSubjectId();
    }

    @Override
    @NonNull
    public Long value6() {
        return getAccountId();
    }

    @Override
    @NonNull
    public Boolean value7() {
        return getEnabled();
    }

    @Override
    @NonNull
    public Boolean value8() {
        return getExpired();
    }

    @Override
    @NonNull
    public PsysAuthUserRecord value1(@NonNull Long value) {
        setId(value);
        return this;
    }

    @Override
    @NonNull
    public PsysAuthUserRecord value2(@NonNull String value) {
        setUsername(value);
        return this;
    }

    @Override
    @NonNull
    public PsysAuthUserRecord value3(@NonNull String value) {
        setPassword(value);
        return this;
    }

    @Override
    @NonNull
    public PsysAuthUserRecord value4(@NonNull String value) {
        setNickname(value);
        return this;
    }

    @Override
    @NonNull
    public PsysAuthUserRecord value5(@NonNull Long value) {
        setSubjectId(value);
        return this;
    }

    @Override
    @NonNull
    public PsysAuthUserRecord value6(@NonNull Long value) {
        setAccountId(value);
        return this;
    }

    @Override
    @NonNull
    public PsysAuthUserRecord value7(@NonNull Boolean value) {
        setEnabled(value);
        return this;
    }

    @Override
    @NonNull
    public PsysAuthUserRecord value8(@NonNull Boolean value) {
        setExpired(value);
        return this;
    }

    @Override
    @NonNull
    public PsysAuthUserRecord values(@NonNull Long value1, @NonNull String value2, @NonNull String value3, @NonNull String value4, @NonNull Long value5, @NonNull Long value6, @NonNull Boolean value7, @NonNull Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PsysAuthUserRecord
     */
    public PsysAuthUserRecord() {
        super(PsysAuthUser.PSYS_AUTH_USER);
    }

    /**
     * Create a detached, initialised PsysAuthUserRecord
     */
    public PsysAuthUserRecord(@NonNull Long id, @NonNull String username, @NonNull String password, @NonNull String nickname, @NonNull Long subjectId, @NonNull Long accountId, @NonNull Boolean enabled, @NonNull Boolean expired) {
        super(PsysAuthUser.PSYS_AUTH_USER);

        setId(id);
        setUsername(username);
        setPassword(password);
        setNickname(nickname);
        setSubjectId(subjectId);
        setAccountId(accountId);
        setEnabled(enabled);
        setExpired(expired);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PsysAuthUserRecord
     */
    public PsysAuthUserRecord(PsysAuthUserPo value) {
        super(PsysAuthUser.PSYS_AUTH_USER);

        if (value != null) {
            setId(value.id());
            setUsername(value.username());
            setPassword(value.password());
            setNickname(value.nickname());
            setSubjectId(value.subjectId());
            setAccountId(value.accountId());
            setEnabled(value.enabled());
            setExpired(value.expired());
            resetChangedOnNotNull();
        }
    }
}
