/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables;


import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.Keys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.PresetSys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.records.PsysAbacResourceRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;


/**
 * 属性访问控制_资源表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsysAbacResource extends TableImpl<PsysAbacResourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preset_sys.psys_abac_resource</code>
     */
    public static final PsysAbacResource PSYS_ABAC_RESOURCE = new PsysAbacResource();

    /**
     * The class holding records for this type
     */
    @Override
    @NonNull
    public Class<PsysAbacResourceRecord> getRecordType() {
        return PsysAbacResourceRecord.class;
    }

    /**
     * The column <code>preset_sys.psys_abac_resource.id</code>. 主键
     */
    public final TableField<PsysAbacResourceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>preset_sys.psys_abac_resource.owner_subject_id</code>.
     * 拥有该资源的主体id
     */
    public final TableField<PsysAbacResourceRecord, Long> OWNER_SUBJECT_ID = createField(DSL.name("owner_subject_id"), SQLDataType.BIGINT.nullable(false), this, "拥有该资源的主体id");

    /**
     * The column <code>preset_sys.psys_abac_resource.resource_attr_set</code>.
     * 资源属性集合
     */
    public final TableField<PsysAbacResourceRecord, String> RESOURCE_ATTR_SET = createField(DSL.name("resource_attr_set"), SQLDataType.VARCHAR.nullable(false), this, "资源属性集合");

    /**
     * The column <code>preset_sys.psys_abac_resource.action_type_set</code>.
     * 操作类型集合
     */
    public final TableField<PsysAbacResourceRecord, String> ACTION_TYPE_SET = createField(DSL.name("action_type_set"), SQLDataType.VARCHAR.nullable(false), this, "操作类型集合");

    /**
     * The column <code>preset_sys.psys_abac_resource.protection_id</code>.
     * 资源保护列表id
     */
    public final TableField<PsysAbacResourceRecord, Long> PROTECTION_ID = createField(DSL.name("protection_id"), SQLDataType.BIGINT.nullable(false), this, "资源保护列表id");

    /**
     * The column <code>preset_sys.psys_abac_resource.business_id</code>. 业务id
     */
    public final TableField<PsysAbacResourceRecord, Long> BUSINESS_ID = createField(DSL.name("business_id"), SQLDataType.BIGINT, this, "业务id");

    private PsysAbacResource(Name alias, Table<PsysAbacResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private PsysAbacResource(Name alias, Table<PsysAbacResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("属性访问控制_资源表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>preset_sys.psys_abac_resource</code> table
     * reference
     */
    public PsysAbacResource(String alias) {
        this(DSL.name(alias), PSYS_ABAC_RESOURCE);
    }

    /**
     * Create an aliased <code>preset_sys.psys_abac_resource</code> table
     * reference
     */
    public PsysAbacResource(Name alias) {
        this(alias, PSYS_ABAC_RESOURCE);
    }

    /**
     * Create a <code>preset_sys.psys_abac_resource</code> table reference
     */
    public PsysAbacResource() {
        this(DSL.name("psys_abac_resource"), null);
    }

    public <O extends Record> PsysAbacResource(Table<O> child, ForeignKey<O, PsysAbacResourceRecord> key) {
        super(child, key, PSYS_ABAC_RESOURCE);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PresetSys.PRESET_SYS;
    }

    @Override
    @NonNull
    public UniqueKey<PsysAbacResourceRecord> getPrimaryKey() {
        return Keys.PSYS_ABAC_RESOURCE_PK;
    }

    @Override
    @NonNull
    public List<UniqueKey<PsysAbacResourceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PSYS_ABAC_RESOURCE_PK2);
    }

    @Override
    @NonNull
    public PsysAbacResource as(String alias) {
        return new PsysAbacResource(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public PsysAbacResource as(Name alias) {
        return new PsysAbacResource(alias, this);
    }

    @Override
    @NonNull
    public PsysAbacResource as(Table<?> alias) {
        return new PsysAbacResource(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysAbacResource rename(String name) {
        return new PsysAbacResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysAbacResource rename(Name name) {
        return new PsysAbacResource(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysAbacResource rename(Table<?> name) {
        return new PsysAbacResource(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row6<Long, Long, String, String, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super String, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super String, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
