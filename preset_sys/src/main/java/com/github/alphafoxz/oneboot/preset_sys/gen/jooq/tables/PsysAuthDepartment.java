/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables;


import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.Keys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.PresetSys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.records.PsysAuthDepartmentRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;


/**
 * 部门机构
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsysAuthDepartment extends TableImpl<PsysAuthDepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preset_sys.psys_auth_department</code>
     */
    public static final PsysAuthDepartment PSYS_AUTH_DEPARTMENT = new PsysAuthDepartment();

    /**
     * The class holding records for this type
     */
    @Override
    @NonNull
    public Class<PsysAuthDepartmentRecord> getRecordType() {
        return PsysAuthDepartmentRecord.class;
    }

    /**
     * The column <code>preset_sys.psys_auth_department.id</code>. 主键
     */
    public final TableField<PsysAuthDepartmentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>preset_sys.psys_auth_department.dept_name</code>. 部门名称
     */
    public final TableField<PsysAuthDepartmentRecord, String> DEPT_NAME = createField(DSL.name("dept_name"), SQLDataType.VARCHAR(50).nullable(false), this, "部门名称");

    /**
     * The column <code>preset_sys.psys_auth_department.sort</code>. 排序
     */
    public final TableField<PsysAuthDepartmentRecord, Integer> SORT = createField(DSL.name("sort"), SQLDataType.INTEGER, this, "排序");

    /**
     * The column <code>preset_sys.psys_auth_department.status</code>. 状态
     */
    public final TableField<PsysAuthDepartmentRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT, this, "状态");

    private PsysAuthDepartment(Name alias, Table<PsysAuthDepartmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private PsysAuthDepartment(Name alias, Table<PsysAuthDepartmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("部门机构"), TableOptions.table());
    }

    /**
     * Create an aliased <code>preset_sys.psys_auth_department</code> table
     * reference
     */
    public PsysAuthDepartment(String alias) {
        this(DSL.name(alias), PSYS_AUTH_DEPARTMENT);
    }

    /**
     * Create an aliased <code>preset_sys.psys_auth_department</code> table
     * reference
     */
    public PsysAuthDepartment(Name alias) {
        this(alias, PSYS_AUTH_DEPARTMENT);
    }

    /**
     * Create a <code>preset_sys.psys_auth_department</code> table reference
     */
    public PsysAuthDepartment() {
        this(DSL.name("psys_auth_department"), null);
    }

    public <O extends Record> PsysAuthDepartment(Table<O> child, ForeignKey<O, PsysAuthDepartmentRecord> key) {
        super(child, key, PSYS_AUTH_DEPARTMENT);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PresetSys.PRESET_SYS;
    }

    @Override
    @NonNull
    public UniqueKey<PsysAuthDepartmentRecord> getPrimaryKey() {
        return Keys.PSYS_AUTH_DEPARTMENT_PK;
    }

    @Override
    @NonNull
    public PsysAuthDepartment as(String alias) {
        return new PsysAuthDepartment(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public PsysAuthDepartment as(Name alias) {
        return new PsysAuthDepartment(alias, this);
    }

    @Override
    @NonNull
    public PsysAuthDepartment as(Table<?> alias) {
        return new PsysAuthDepartment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysAuthDepartment rename(String name) {
        return new PsysAuthDepartment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysAuthDepartment rename(Name name) {
        return new PsysAuthDepartment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysAuthDepartment rename(Table<?> name) {
        return new PsysAuthDepartment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row4<Long, String, Integer, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super Integer, ? super Short, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super Integer, ? super Short, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
