/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables;


import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.Keys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.PresetSys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.records.PsysUserRecord;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>preset_sys.psys_user</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PsysUser extends TableImpl<PsysUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preset_sys.psys_user</code>
     */
    public static final PsysUser PSYS_USER = new PsysUser();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<PsysUserRecord> getRecordType() {
        return PsysUserRecord.class;
    }

    /**
     * The column <code>preset_sys.psys_user.id</code>. 主键
     */
    public final TableField<PsysUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>preset_sys.psys_user.username</code>. 用户名
     */
    public final TableField<PsysUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR.nullable(false), this, "用户名");

    /**
     * The column <code>preset_sys.psys_user.nickname</code>. 昵称
     */
    public final TableField<PsysUserRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR.nullable(false), this, "昵称");

    /**
     * The column <code>preset_sys.psys_user.user_status</code>. 用户状态
     */
    public final TableField<PsysUserRecord, String> USER_STATUS = createField(DSL.name("user_status"), SQLDataType.VARCHAR.nullable(false), this, "用户状态");

    /**
     * The column <code>preset_sys.psys_user.create_time</code>. 创建时间
     */
    public final TableField<PsysUserRecord, OffsetDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "创建时间");

    /**
     * The column <code>preset_sys.psys_user._version</code>. 版本
     */
    public final TableField<PsysUserRecord, OffsetDateTime> _VERSION = createField(DSL.name("_version"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "版本");

    /**
     * The column <code>preset_sys.psys_user.account_id</code>. 账户id
     */
    public final TableField<PsysUserRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "账户id");

    private PsysUser(Name alias, Table<PsysUserRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PsysUser(Name alias, Table<PsysUserRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preset_sys.psys_user</code> table reference
     */
    public PsysUser(String alias) {
        this(DSL.name(alias), PSYS_USER);
    }

    /**
     * Create an aliased <code>preset_sys.psys_user</code> table reference
     */
    public PsysUser(Name alias) {
        this(alias, PSYS_USER);
    }

    /**
     * Create a <code>preset_sys.psys_user</code> table reference
     */
    public PsysUser() {
        this(DSL.name("psys_user"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PresetSys.PRESET_SYS;
    }

    @Override
    @Nonnull
    public Identity<PsysUserRecord, Long> getIdentity() {
        return (Identity<PsysUserRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<PsysUserRecord> getPrimaryKey() {
        return Keys.PSYS_USER_PK;
    }

    @Override
    @Nonnull
    public TableField<PsysUserRecord, OffsetDateTime> getRecordTimestamp() {
        return _VERSION;
    }

    @Override
    @Nonnull
    public PsysUser as(String alias) {
        return new PsysUser(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public PsysUser as(Name alias) {
        return new PsysUser(alias, this);
    }

    @Override
    @Nonnull
    public PsysUser as(Table<?> alias) {
        return new PsysUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PsysUser rename(String name) {
        return new PsysUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PsysUser rename(Name name) {
        return new PsysUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PsysUser rename(Table<?> name) {
        return new PsysUser(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PsysUser where(Condition condition) {
        return new PsysUser(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PsysUser where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PsysUser where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PsysUser where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PsysUser where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PsysUser where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PsysUser where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public PsysUser where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PsysUser whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public PsysUser whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
