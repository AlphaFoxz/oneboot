/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables;


import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.Indexes;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.Keys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.PresetSys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.records.PsysUserRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;


/**
 * 用户表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsysUser extends TableImpl<PsysUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preset_sys.psys_user</code>
     */
    public static final PsysUser PSYS_USER = new PsysUser();

    /**
     * The class holding records for this type
     */
    @Override
    @NonNull
    public Class<PsysUserRecord> getRecordType() {
        return PsysUserRecord.class;
    }

    /**
     * The column <code>preset_sys.psys_user.id</code>. 主键
     */
    public final TableField<PsysUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>preset_sys.psys_user.username</code>. 用户名称
     */
    public final TableField<PsysUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(50).nullable(false), this, "用户名称");

    /**
     * The column <code>preset_sys.psys_user.password</code>. 密码
     */
    public final TableField<PsysUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CHAR(60).nullable(false), this, "密码");

    /**
     * The column <code>preset_sys.psys_user.nickname</code>. 昵称
     */
    public final TableField<PsysUserRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR(50).nullable(false), this, "昵称");

    /**
     * The column <code>preset_sys.psys_user.subject_id</code>. 主体id
     */
    public final TableField<PsysUserRecord, Long> SUBJECT_ID = createField(DSL.name("subject_id"), SQLDataType.BIGINT.nullable(false), this, "主体id");

    /**
     * The column <code>preset_sys.psys_user.account_id</code>. 账户id
     */
    public final TableField<PsysUserRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "账户id");

    /**
     * The column <code>preset_sys.psys_user.enabled</code>. 是否可用
     */
    public final TableField<PsysUserRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "是否可用");

    /**
     * The column <code>preset_sys.psys_user.expired</code>. 是否过期
     */
    public final TableField<PsysUserRecord, Boolean> EXPIRED = createField(DSL.name("expired"), SQLDataType.BOOLEAN.nullable(false), this, "是否过期");

    /**
     * The column <code>preset_sys.psys_user.remark</code>. 描述
     */
    public final TableField<PsysUserRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(300), this, "描述");

    /**
     * The column <code>preset_sys.psys_user.department_id</code>. 部门id
     */
    public final TableField<PsysUserRecord, Long> DEPARTMENT_ID = createField(DSL.name("department_id"), SQLDataType.BIGINT, this, "部门id");

    /**
     * The column <code>preset_sys.psys_user.phone</code>. 手机号码
     */
    public final TableField<PsysUserRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(20), this, "手机号码");

    /**
     * The column <code>preset_sys.psys_user.create_time</code>. 创建时间
     */
    public final TableField<PsysUserRecord, OffsetDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "创建时间");

    /**
     * The column <code>preset_sys.psys_user.avatar</code>. 头像
     */
    public final TableField<PsysUserRecord, String> AVATAR = createField(DSL.name("avatar"), SQLDataType.VARCHAR(255), this, "头像");

    /**
     * The column <code>preset_sys.psys_user.sex</code>. 性别
     */
    public final TableField<PsysUserRecord, Short> SEX = createField(DSL.name("sex"), SQLDataType.SMALLINT, this, "性别");

    /**
     * The column <code>preset_sys.psys_user.email</code>. 电子邮箱
     */
    public final TableField<PsysUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "电子邮箱");

    /**
     * The column <code>preset_sys.psys_user.status</code>. 状态
     */
    public final TableField<PsysUserRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT.nullable(false), this, "状态");

    private PsysUser(Name alias, Table<PsysUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private PsysUser(Name alias, Table<PsysUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>preset_sys.psys_user</code> table reference
     */
    public PsysUser(String alias) {
        this(DSL.name(alias), PSYS_USER);
    }

    /**
     * Create an aliased <code>preset_sys.psys_user</code> table reference
     */
    public PsysUser(Name alias) {
        this(alias, PSYS_USER);
    }

    /**
     * Create a <code>preset_sys.psys_user</code> table reference
     */
    public PsysUser() {
        this(DSL.name("psys_user"), null);
    }

    public <O extends Record> PsysUser(Table<O> child, ForeignKey<O, PsysUserRecord> key) {
        super(child, key, PSYS_USER);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PresetSys.PRESET_SYS;
    }

    @Override
    @NonNull
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PSYS_USER_ACCOUNT_ID_INDEX, Indexes.PSYS_USER_USERNAME_UINDEX);
    }

    @Override
    @NonNull
    public UniqueKey<PsysUserRecord> getPrimaryKey() {
        return Keys.PSYS_USER_PK;
    }

    @Override
    @NonNull
    public PsysUser as(String alias) {
        return new PsysUser(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public PsysUser as(Name alias) {
        return new PsysUser(alias, this);
    }

    @Override
    @NonNull
    public PsysUser as(Table<?> alias) {
        return new PsysUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysUser rename(String name) {
        return new PsysUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysUser rename(Name name) {
        return new PsysUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysUser rename(Table<?> name) {
        return new PsysUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row16<Long, String, String, String, Long, Long, Boolean, Boolean, String, Long, String, OffsetDateTime, String, Short, String, Short> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super Boolean, ? super Boolean, ? super String, ? super Long, ? super String, ? super OffsetDateTime, ? super String, ? super Short, ? super String, ? super Short, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super Boolean, ? super Boolean, ? super String, ? super Long, ? super String, ? super OffsetDateTime, ? super String, ? super Short, ? super String, ? super Short, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
