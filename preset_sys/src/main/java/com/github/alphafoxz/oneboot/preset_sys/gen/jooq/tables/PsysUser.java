/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables;


import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.Keys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.PresetSys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.records.PsysUserRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * 用户表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsysUser extends TableImpl<PsysUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preset_sys.psys_user</code>
     */
    public static final PsysUser PSYS_USER = new PsysUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PsysUserRecord> getRecordType() {
        return PsysUserRecord.class;
    }

    /**
     * The column <code>preset_sys.psys_user.name</code>. 用户名
     */
    public final TableField<PsysUserRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(10), this, "用户名");

    /**
     * The column <code>preset_sys.psys_user.id</code>. 主键
     */
    public final TableField<PsysUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>preset_sys.psys_user.ext_info</code>. 其他信息
     */
    public final TableField<PsysUserRecord, JSONB> EXT_INFO = createField(DSL.name("ext_info"), SQLDataType.JSONB, this, "其他信息");

    private PsysUser(Name alias, Table<PsysUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private PsysUser(Name alias, Table<PsysUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>preset_sys.psys_user</code> table reference
     */
    public PsysUser(String alias) {
        this(DSL.name(alias), PSYS_USER);
    }

    /**
     * Create an aliased <code>preset_sys.psys_user</code> table reference
     */
    public PsysUser(Name alias) {
        this(alias, PSYS_USER);
    }

    /**
     * Create a <code>preset_sys.psys_user</code> table reference
     */
    public PsysUser() {
        this(DSL.name("psys_user"), null);
    }

    public <O extends Record> PsysUser(Table<O> child, ForeignKey<O, PsysUserRecord> key) {
        super(child, key, PSYS_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PresetSys.PRESET_SYS;
    }

    @Override
    public UniqueKey<PsysUserRecord> getPrimaryKey() {
        return Keys.PSYS_USER_PK;
    }

    @Override
    public PsysUser as(String alias) {
        return new PsysUser(DSL.name(alias), this);
    }

    @Override
    public PsysUser as(Name alias) {
        return new PsysUser(alias, this);
    }

    @Override
    public PsysUser as(Table<?> alias) {
        return new PsysUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PsysUser rename(String name) {
        return new PsysUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PsysUser rename(Name name) {
        return new PsysUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PsysUser rename(Table<?> name) {
        return new PsysUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Long, JSONB> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super Long, ? super JSONB, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super Long, ? super JSONB, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
