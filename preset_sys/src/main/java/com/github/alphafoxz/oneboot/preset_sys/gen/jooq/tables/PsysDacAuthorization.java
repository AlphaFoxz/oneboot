/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables;


import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.Keys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.PresetSys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.records.PsysDacAuthorizationRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;


/**
 * 动态访问控制_授权表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsysDacAuthorization extends TableImpl<PsysDacAuthorizationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preset_sys.psys_dac_authorization</code>
     */
    public static final PsysDacAuthorization PSYS_DAC_AUTHORIZATION = new PsysDacAuthorization();

    /**
     * The class holding records for this type
     */
    @Override
    @NonNull
    public Class<PsysDacAuthorizationRecord> getRecordType() {
        return PsysDacAuthorizationRecord.class;
    }

    /**
     * The column <code>preset_sys.psys_dac_authorization.id</code>. 主键
     */
    public final TableField<PsysDacAuthorizationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column
     * <code>preset_sys.psys_dac_authorization.authorization_type</code>. 授权类型
     * 0主动 1被动
     */
    public final TableField<PsysDacAuthorizationRecord, String> AUTHORIZATION_TYPE = createField(DSL.name("authorization_type"), SQLDataType.CHAR(1).nullable(false), this, "授权类型 0主动 1被动");

    /**
     * The column
     * <code>preset_sys.psys_dac_authorization.subject_attr_set</code>. 授权主体属性集合
     */
    public final TableField<PsysDacAuthorizationRecord, String> SUBJECT_ATTR_SET = createField(DSL.name("subject_attr_set"), SQLDataType.VARCHAR.nullable(false), this, "授权主体属性集合");

    /**
     * The column <code>preset_sys.psys_dac_authorization.timeout_until</code>.
     * 授权过期时间
     */
    public final TableField<PsysDacAuthorizationRecord, OffsetDateTime> TIMEOUT_UNTIL = createField(DSL.name("timeout_until"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "授权过期时间");

    /**
     * The column <code>preset_sys.psys_dac_authorization.resource_id</code>.
     * 资源属性id
     */
    public final TableField<PsysDacAuthorizationRecord, Long> RESOURCE_ID = createField(DSL.name("resource_id"), SQLDataType.BIGINT.nullable(false), this, "资源属性id");

    /**
     * The column
     * <code>preset_sys.psys_dac_authorization.owner_subject_id</code>.
     * 资源所有者主体Id
     */
    public final TableField<PsysDacAuthorizationRecord, Long> OWNER_SUBJECT_ID = createField(DSL.name("owner_subject_id"), SQLDataType.BIGINT.nullable(false), this, "资源所有者主体Id");

    /**
     * The column
     * <code>preset_sys.psys_dac_authorization.target_subject_id</code>.
     * 授权目标主体Id
     */
    public final TableField<PsysDacAuthorizationRecord, Long> TARGET_SUBJECT_ID = createField(DSL.name("target_subject_id"), SQLDataType.BIGINT, this, "授权目标主体Id");

    private PsysDacAuthorization(Name alias, Table<PsysDacAuthorizationRecord> aliased) {
        this(alias, aliased, null);
    }

    private PsysDacAuthorization(Name alias, Table<PsysDacAuthorizationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("动态访问控制_授权表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>preset_sys.psys_dac_authorization</code> table
     * reference
     */
    public PsysDacAuthorization(String alias) {
        this(DSL.name(alias), PSYS_DAC_AUTHORIZATION);
    }

    /**
     * Create an aliased <code>preset_sys.psys_dac_authorization</code> table
     * reference
     */
    public PsysDacAuthorization(Name alias) {
        this(alias, PSYS_DAC_AUTHORIZATION);
    }

    /**
     * Create a <code>preset_sys.psys_dac_authorization</code> table reference
     */
    public PsysDacAuthorization() {
        this(DSL.name("psys_dac_authorization"), null);
    }

    public <O extends Record> PsysDacAuthorization(Table<O> child, ForeignKey<O, PsysDacAuthorizationRecord> key) {
        super(child, key, PSYS_DAC_AUTHORIZATION);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PresetSys.PRESET_SYS;
    }

    @Override
    @NonNull
    public UniqueKey<PsysDacAuthorizationRecord> getPrimaryKey() {
        return Keys.PSYS_DAC_AUTHORIZATION_PK;
    }

    @Override
    @NonNull
    public PsysDacAuthorization as(String alias) {
        return new PsysDacAuthorization(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public PsysDacAuthorization as(Name alias) {
        return new PsysDacAuthorization(alias, this);
    }

    @Override
    @NonNull
    public PsysDacAuthorization as(Table<?> alias) {
        return new PsysDacAuthorization(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysDacAuthorization rename(String name) {
        return new PsysDacAuthorization(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysDacAuthorization rename(Name name) {
        return new PsysDacAuthorization(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysDacAuthorization rename(Table<?> name) {
        return new PsysDacAuthorization(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row7<Long, String, String, OffsetDateTime, Long, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
