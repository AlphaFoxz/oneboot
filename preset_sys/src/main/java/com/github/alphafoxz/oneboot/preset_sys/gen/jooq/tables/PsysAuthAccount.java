/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables;


import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.Keys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.PresetSys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.records.PsysAuthAccountRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsysAuthAccount extends TableImpl<PsysAuthAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preset_sys.psys_auth_account</code>
     */
    public static final PsysAuthAccount PSYS_AUTH_ACCOUNT = new PsysAuthAccount();

    /**
     * The class holding records for this type
     */
    @Override
    @NonNull
    public Class<PsysAuthAccountRecord> getRecordType() {
        return PsysAuthAccountRecord.class;
    }

    /**
     * The column <code>preset_sys.psys_auth_account.id</code>. 主键
     */
    public final TableField<PsysAuthAccountRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>preset_sys.psys_auth_account.expired</code>. 是否过期
     */
    public final TableField<PsysAuthAccountRecord, Boolean> EXPIRED = createField(DSL.name("expired"), SQLDataType.BOOLEAN.nullable(false), this, "是否过期");

    /**
     * The column <code>preset_sys.psys_auth_account.enabled</code>. 是否可用
     */
    public final TableField<PsysAuthAccountRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "是否可用");

    private PsysAuthAccount(Name alias, Table<PsysAuthAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private PsysAuthAccount(Name alias, Table<PsysAuthAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>preset_sys.psys_auth_account</code> table
     * reference
     */
    public PsysAuthAccount(String alias) {
        this(DSL.name(alias), PSYS_AUTH_ACCOUNT);
    }

    /**
     * Create an aliased <code>preset_sys.psys_auth_account</code> table
     * reference
     */
    public PsysAuthAccount(Name alias) {
        this(alias, PSYS_AUTH_ACCOUNT);
    }

    /**
     * Create a <code>preset_sys.psys_auth_account</code> table reference
     */
    public PsysAuthAccount() {
        this(DSL.name("psys_auth_account"), null);
    }

    public <O extends Record> PsysAuthAccount(Table<O> child, ForeignKey<O, PsysAuthAccountRecord> key) {
        super(child, key, PSYS_AUTH_ACCOUNT);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PresetSys.PRESET_SYS;
    }

    @Override
    @NonNull
    public UniqueKey<PsysAuthAccountRecord> getPrimaryKey() {
        return Keys.PSYS_AUTH_ACCOUNT_PK;
    }

    @Override
    @NonNull
    public PsysAuthAccount as(String alias) {
        return new PsysAuthAccount(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public PsysAuthAccount as(Name alias) {
        return new PsysAuthAccount(alias, this);
    }

    @Override
    @NonNull
    public PsysAuthAccount as(Table<?> alias) {
        return new PsysAuthAccount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysAuthAccount rename(String name) {
        return new PsysAuthAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysAuthAccount rename(Name name) {
        return new PsysAuthAccount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysAuthAccount rename(Table<?> name) {
        return new PsysAuthAccount(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row3<Long, Boolean, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
