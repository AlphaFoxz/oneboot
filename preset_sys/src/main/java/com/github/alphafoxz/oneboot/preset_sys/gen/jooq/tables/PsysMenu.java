/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables;


import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.Keys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.PresetSys;
import com.github.alphafoxz.oneboot.preset_sys.gen.jooq.tables.records.PsysMenuRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsysMenu extends TableImpl<PsysMenuRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preset_sys.psys_menu</code>
     */
    public static final PsysMenu PSYS_MENU = new PsysMenu();

    /**
     * The class holding records for this type
     */
    @Override
    @NonNull
    public Class<PsysMenuRecord> getRecordType() {
        return PsysMenuRecord.class;
    }

    /**
     * The column <code>preset_sys.psys_menu.id</code>. 主键
     */
    public final TableField<PsysMenuRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>preset_sys.psys_menu.menu_name</code>. 菜单名称
     */
    public final TableField<PsysMenuRecord, String> MENU_NAME = createField(DSL.name("menu_name"), SQLDataType.VARCHAR(50).nullable(false), this, "菜单名称");

    /**
     * The column <code>preset_sys.psys_menu.uri_route</code>. 路径路由
     */
    public final TableField<PsysMenuRecord, String> URI_ROUTE = createField(DSL.name("uri_route"), SQLDataType.VARCHAR(200), this, "路径路由");

    /**
     * The column <code>preset_sys.psys_menu.component_route</code>. 组件路由
     */
    public final TableField<PsysMenuRecord, String> COMPONENT_ROUTE = createField(DSL.name("component_route"), SQLDataType.VARCHAR(250), this, "组件路由");

    /**
     * The column <code>preset_sys.psys_menu.auth_values</code>. 权限标识
     */
    public final TableField<PsysMenuRecord, String> AUTH_VALUES = createField(DSL.name("auth_values"), SQLDataType.VARCHAR.nullable(false), this, "权限标识");

    /**
     * The column <code>preset_sys.psys_menu.sort</code>. 排序
     */
    public final TableField<PsysMenuRecord, Integer> SORT = createField(DSL.name("sort"), SQLDataType.INTEGER.nullable(false), this, "排序");

    /**
     * The column <code>preset_sys.psys_menu.type</code>. 类型（1菜单 2按钮）
     */
    public final TableField<PsysMenuRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CHAR(1).nullable(false), this, "类型（1菜单 2按钮）");

    /**
     * The column <code>preset_sys.psys_menu.redirect_uri</code>. 重定向地址
     */
    public final TableField<PsysMenuRecord, String> REDIRECT_URI = createField(DSL.name("redirect_uri"), SQLDataType.VARCHAR(250), this, "重定向地址");

    /**
     * The column <code>preset_sys.psys_menu.icon</code>. 图标
     */
    public final TableField<PsysMenuRecord, String> ICON = createField(DSL.name("icon"), SQLDataType.VARCHAR(50), this, "图标");

    /**
     * The column <code>preset_sys.psys_menu.link_address</code>. 链接地址
     */
    public final TableField<PsysMenuRecord, String> LINK_ADDRESS = createField(DSL.name("link_address"), SQLDataType.VARCHAR(250), this, "链接地址");

    /**
     * The column <code>preset_sys.psys_menu.hidden</code>. 是否隐藏
     */
    public final TableField<PsysMenuRecord, Boolean> HIDDEN = createField(DSL.name("hidden"), SQLDataType.BOOLEAN.nullable(false), this, "是否隐藏");

    /**
     * The column <code>preset_sys.psys_menu.cached</code>. 是否缓存
     */
    public final TableField<PsysMenuRecord, Boolean> CACHED = createField(DSL.name("cached"), SQLDataType.BOOLEAN.nullable(false), this, "是否缓存");

    /**
     * The column <code>preset_sys.psys_menu.pinned</code>. 是否固定
     */
    public final TableField<PsysMenuRecord, Boolean> PINNED = createField(DSL.name("pinned"), SQLDataType.BOOLEAN.nullable(false), this, "是否固定");

    /**
     * The column <code>preset_sys.psys_menu.outer_link</code>. 是否外链
     */
    public final TableField<PsysMenuRecord, Boolean> OUTER_LINK = createField(DSL.name("outer_link"), SQLDataType.BOOLEAN.nullable(false), this, "是否外链");

    /**
     * The column <code>preset_sys.psys_menu.embed</code>. 是否嵌入
     */
    public final TableField<PsysMenuRecord, Boolean> EMBED = createField(DSL.name("embed"), SQLDataType.BOOLEAN.nullable(false), this, "是否嵌入");

    private PsysMenu(Name alias, Table<PsysMenuRecord> aliased) {
        this(alias, aliased, null);
    }

    private PsysMenu(Name alias, Table<PsysMenuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>preset_sys.psys_menu</code> table reference
     */
    public PsysMenu(String alias) {
        this(DSL.name(alias), PSYS_MENU);
    }

    /**
     * Create an aliased <code>preset_sys.psys_menu</code> table reference
     */
    public PsysMenu(Name alias) {
        this(alias, PSYS_MENU);
    }

    /**
     * Create a <code>preset_sys.psys_menu</code> table reference
     */
    public PsysMenu() {
        this(DSL.name("psys_menu"), null);
    }

    public <O extends Record> PsysMenu(Table<O> child, ForeignKey<O, PsysMenuRecord> key) {
        super(child, key, PSYS_MENU);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PresetSys.PRESET_SYS;
    }

    @Override
    @NonNull
    public UniqueKey<PsysMenuRecord> getPrimaryKey() {
        return Keys.PSYS_MENU_PK;
    }

    @Override
    @NonNull
    public PsysMenu as(String alias) {
        return new PsysMenu(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public PsysMenu as(Name alias) {
        return new PsysMenu(alias, this);
    }

    @Override
    @NonNull
    public PsysMenu as(Table<?> alias) {
        return new PsysMenu(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysMenu rename(String name) {
        return new PsysMenu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysMenu rename(Name name) {
        return new PsysMenu(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PsysMenu rename(Table<?> name) {
        return new PsysMenu(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row15<Long, String, String, String, String, Integer, String, String, String, String, Boolean, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super Long, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super Long, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
