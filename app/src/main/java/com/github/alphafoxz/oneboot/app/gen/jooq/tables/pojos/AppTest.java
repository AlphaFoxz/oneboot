/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.app.gen.jooq.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.OffsetTime;

import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;


/**
 * 测试表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppTest implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final String testJson;
    private final LocalDate testDate;
    private final LocalDateTime testTimestamp;
    private final Boolean testBool;
    private final Double testDouble;
    private final Float testFloat;
    private final OffsetDateTime testTimestamptz;
    private final LocalTime testTime;
    private final OffsetTime testTimetz;
    private final Object testDaterange;
    private final String testVarchar50;

    public AppTest(AppTest value) {
        this.id = value.id;
        this.testJson = value.testJson;
        this.testDate = value.testDate;
        this.testTimestamp = value.testTimestamp;
        this.testBool = value.testBool;
        this.testDouble = value.testDouble;
        this.testFloat = value.testFloat;
        this.testTimestamptz = value.testTimestamptz;
        this.testTime = value.testTime;
        this.testTimetz = value.testTimetz;
        this.testDaterange = value.testDaterange;
        this.testVarchar50 = value.testVarchar50;
    }

    public AppTest(
        @NonNull Long id,
        @Nullable String testJson,
        @Nullable LocalDate testDate,
        @Nullable LocalDateTime testTimestamp,
        @Nullable Boolean testBool,
        @Nullable Double testDouble,
        @Nullable Float testFloat,
        @Nullable OffsetDateTime testTimestamptz,
        @Nullable LocalTime testTime,
        @Nullable OffsetTime testTimetz,
        @Nullable Object testDaterange,
        @Nullable String testVarchar50
    ) {
        this.id = id;
        this.testJson = testJson;
        this.testDate = testDate;
        this.testTimestamp = testTimestamp;
        this.testBool = testBool;
        this.testDouble = testDouble;
        this.testFloat = testFloat;
        this.testTimestamptz = testTimestamptz;
        this.testTime = testTime;
        this.testTimetz = testTimetz;
        this.testDaterange = testDaterange;
        this.testVarchar50 = testVarchar50;
    }

    /**
     * Getter for <code>app.app_test.id</code>. 主键
     */
    @NotNull
    @NonNull
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>app.app_test.test_json</code>. JSON数据
     */
    @Nullable
    public String getTestJson() {
        return this.testJson;
    }

    /**
     * Getter for <code>app.app_test.test_date</code>. 测试日期
     */
    @Nullable
    public LocalDate getTestDate() {
        return this.testDate;
    }

    /**
     * Getter for <code>app.app_test.test_timestamp</code>. 测试日期时间戳
     */
    @Nullable
    public LocalDateTime getTestTimestamp() {
        return this.testTimestamp;
    }

    /**
     * Getter for <code>app.app_test.test_bool</code>. 测试布尔
     */
    @Nullable
    public Boolean getTestBool() {
        return this.testBool;
    }

    /**
     * Getter for <code>app.app_test.test_double</code>. 测试双精度浮点数
     */
    @Nullable
    public Double getTestDouble() {
        return this.testDouble;
    }

    /**
     * Getter for <code>app.app_test.test_float</code>. 测试单精度浮点数
     */
    @Nullable
    public Float getTestFloat() {
        return this.testFloat;
    }

    /**
     * Getter for <code>app.app_test.test_timestamptz</code>. 测试日期时间戳时区
     */
    @Nullable
    public OffsetDateTime getTestTimestamptz() {
        return this.testTimestamptz;
    }

    /**
     * Getter for <code>app.app_test.test_time</code>. 测试时间
     */
    @Nullable
    public LocalTime getTestTime() {
        return this.testTime;
    }

    /**
     * Getter for <code>app.app_test.test_timetz</code>. 测试时间时区
     */
    @Nullable
    public OffsetTime getTestTimetz() {
        return this.testTimetz;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Nullable
    public Object getTestDaterange() {
        return this.testDaterange;
    }

    /**
     * Getter for <code>app.app_test.test_varchar50</code>. 测试zi
     */
    @Size(max = 50)
    @Nullable
    public String getTestVarchar50() {
        return this.testVarchar50;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final AppTest other = (AppTest) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.testJson == null) {
            if (other.testJson != null)
                return false;
        }
        else if (!this.testJson.equals(other.testJson))
            return false;
        if (this.testDate == null) {
            if (other.testDate != null)
                return false;
        }
        else if (!this.testDate.equals(other.testDate))
            return false;
        if (this.testTimestamp == null) {
            if (other.testTimestamp != null)
                return false;
        }
        else if (!this.testTimestamp.equals(other.testTimestamp))
            return false;
        if (this.testBool == null) {
            if (other.testBool != null)
                return false;
        }
        else if (!this.testBool.equals(other.testBool))
            return false;
        if (this.testDouble == null) {
            if (other.testDouble != null)
                return false;
        }
        else if (!this.testDouble.equals(other.testDouble))
            return false;
        if (this.testFloat == null) {
            if (other.testFloat != null)
                return false;
        }
        else if (!this.testFloat.equals(other.testFloat))
            return false;
        if (this.testTimestamptz == null) {
            if (other.testTimestamptz != null)
                return false;
        }
        else if (!this.testTimestamptz.equals(other.testTimestamptz))
            return false;
        if (this.testTime == null) {
            if (other.testTime != null)
                return false;
        }
        else if (!this.testTime.equals(other.testTime))
            return false;
        if (this.testTimetz == null) {
            if (other.testTimetz != null)
                return false;
        }
        else if (!this.testTimetz.equals(other.testTimetz))
            return false;
        if (this.testDaterange == null) {
            if (other.testDaterange != null)
                return false;
        }
        else if (!this.testDaterange.equals(other.testDaterange))
            return false;
        if (this.testVarchar50 == null) {
            if (other.testVarchar50 != null)
                return false;
        }
        else if (!this.testVarchar50.equals(other.testVarchar50))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.testJson == null) ? 0 : this.testJson.hashCode());
        result = prime * result + ((this.testDate == null) ? 0 : this.testDate.hashCode());
        result = prime * result + ((this.testTimestamp == null) ? 0 : this.testTimestamp.hashCode());
        result = prime * result + ((this.testBool == null) ? 0 : this.testBool.hashCode());
        result = prime * result + ((this.testDouble == null) ? 0 : this.testDouble.hashCode());
        result = prime * result + ((this.testFloat == null) ? 0 : this.testFloat.hashCode());
        result = prime * result + ((this.testTimestamptz == null) ? 0 : this.testTimestamptz.hashCode());
        result = prime * result + ((this.testTime == null) ? 0 : this.testTime.hashCode());
        result = prime * result + ((this.testTimetz == null) ? 0 : this.testTimetz.hashCode());
        result = prime * result + ((this.testDaterange == null) ? 0 : this.testDaterange.hashCode());
        result = prime * result + ((this.testVarchar50 == null) ? 0 : this.testVarchar50.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AppTest (");

        sb.append(id);
        sb.append(", ").append(testJson);
        sb.append(", ").append(testDate);
        sb.append(", ").append(testTimestamp);
        sb.append(", ").append(testBool);
        sb.append(", ").append(testDouble);
        sb.append(", ").append(testFloat);
        sb.append(", ").append(testTimestamptz);
        sb.append(", ").append(testTime);
        sb.append(", ").append(testTimetz);
        sb.append(", ").append(testDaterange);
        sb.append(", ").append(testVarchar50);

        sb.append(")");
        return sb.toString();
    }
}
