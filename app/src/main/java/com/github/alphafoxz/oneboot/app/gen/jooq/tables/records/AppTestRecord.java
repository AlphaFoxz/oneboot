/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.app.gen.jooq.tables.records;


import com.github.alphafoxz.oneboot.app.gen.jooq.tables.AppTest;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.OffsetTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;


/**
 * 测试表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppTestRecord extends UpdatableRecordImpl<AppTestRecord> implements Record12<Long, String, LocalDate, LocalDateTime, Boolean, Double, Float, OffsetDateTime, LocalTime, OffsetTime, Object, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>app.app_test.id</code>. 主键
     */
    public AppTestRecord setId(@NonNull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.id</code>. 主键
     */
    @NotNull
    @NonNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>app.app_test.test_json</code>. JSON数据
     */
    public AppTestRecord setTestJson(@Nullable String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.test_json</code>. JSON数据
     */
    @Nullable
    public String getTestJson() {
        return (String) get(1);
    }

    /**
     * Setter for <code>app.app_test.test_date</code>. 测试日期
     */
    public AppTestRecord setTestDate(@Nullable LocalDate value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.test_date</code>. 测试日期
     */
    @Nullable
    public LocalDate getTestDate() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for <code>app.app_test.test_timestamp</code>. 测试日期时间戳
     */
    public AppTestRecord setTestTimestamp(@Nullable LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.test_timestamp</code>. 测试日期时间戳
     */
    @Nullable
    public LocalDateTime getTestTimestamp() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>app.app_test.test_bool</code>. 测试布尔
     */
    public AppTestRecord setTestBool(@Nullable Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.test_bool</code>. 测试布尔
     */
    @Nullable
    public Boolean getTestBool() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>app.app_test.test_double</code>. 测试双精度浮点数
     */
    public AppTestRecord setTestDouble(@Nullable Double value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.test_double</code>. 测试双精度浮点数
     */
    @Nullable
    public Double getTestDouble() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>app.app_test.test_float</code>. 测试单精度浮点数
     */
    public AppTestRecord setTestFloat(@Nullable Float value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.test_float</code>. 测试单精度浮点数
     */
    @Nullable
    public Float getTestFloat() {
        return (Float) get(6);
    }

    /**
     * Setter for <code>app.app_test.test_timestamptz</code>. 测试日期时间戳时区
     */
    public AppTestRecord setTestTimestamptz(@Nullable OffsetDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.test_timestamptz</code>. 测试日期时间戳时区
     */
    @Nullable
    public OffsetDateTime getTestTimestamptz() {
        return (OffsetDateTime) get(7);
    }

    /**
     * Setter for <code>app.app_test.test_time</code>. 测试时间
     */
    public AppTestRecord setTestTime(@Nullable LocalTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.test_time</code>. 测试时间
     */
    @Nullable
    public LocalTime getTestTime() {
        return (LocalTime) get(8);
    }

    /**
     * Setter for <code>app.app_test.test_timetz</code>. 测试时间时区
     */
    public AppTestRecord setTestTimetz(@Nullable OffsetTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.test_timetz</code>. 测试时间时区
     */
    @Nullable
    public OffsetTime getTestTimetz() {
        return (OffsetTime) get(9);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public AppTestRecord setTestDaterange(@Nullable Object value) {
        set(10, value);
        return this;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Nullable
    public Object getTestDaterange() {
        return get(10);
    }

    /**
     * Setter for <code>app.app_test.test_varchar50</code>. 测试zi
     */
    public AppTestRecord setTestVarchar50(@Nullable String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>app.app_test.test_varchar50</code>. 测试zi
     */
    @Size(max = 50)
    @Nullable
    public String getTestVarchar50() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row12<Long, String, LocalDate, LocalDateTime, Boolean, Double, Float, OffsetDateTime, LocalTime, OffsetTime, Object, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    @NonNull
    public Row12<Long, String, LocalDate, LocalDateTime, Boolean, Double, Float, OffsetDateTime, LocalTime, OffsetTime, Object, String> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    @NonNull
    public Field<Long> field1() {
        return AppTest.APP_TEST.ID;
    }

    @Override
    @NonNull
    public Field<String> field2() {
        return AppTest.APP_TEST.TEST_JSON;
    }

    @Override
    @NonNull
    public Field<LocalDate> field3() {
        return AppTest.APP_TEST.TEST_DATE;
    }

    @Override
    @NonNull
    public Field<LocalDateTime> field4() {
        return AppTest.APP_TEST.TEST_TIMESTAMP;
    }

    @Override
    @NonNull
    public Field<Boolean> field5() {
        return AppTest.APP_TEST.TEST_BOOL;
    }

    @Override
    @NonNull
    public Field<Double> field6() {
        return AppTest.APP_TEST.TEST_DOUBLE;
    }

    @Override
    @NonNull
    public Field<Float> field7() {
        return AppTest.APP_TEST.TEST_FLOAT;
    }

    @Override
    @NonNull
    public Field<OffsetDateTime> field8() {
        return AppTest.APP_TEST.TEST_TIMESTAMPTZ;
    }

    @Override
    @NonNull
    public Field<LocalTime> field9() {
        return AppTest.APP_TEST.TEST_TIME;
    }

    @Override
    @NonNull
    public Field<OffsetTime> field10() {
        return AppTest.APP_TEST.TEST_TIMETZ;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Override
    @NonNull
    public Field<Object> field11() {
        return AppTest.APP_TEST.TEST_DATERANGE;
    }

    @Override
    @NonNull
    public Field<String> field12() {
        return AppTest.APP_TEST.TEST_VARCHAR50;
    }

    @Override
    @NonNull
    public Long component1() {
        return getId();
    }

    @Override
    @Nullable
    public String component2() {
        return getTestJson();
    }

    @Override
    @Nullable
    public LocalDate component3() {
        return getTestDate();
    }

    @Override
    @Nullable
    public LocalDateTime component4() {
        return getTestTimestamp();
    }

    @Override
    @Nullable
    public Boolean component5() {
        return getTestBool();
    }

    @Override
    @Nullable
    public Double component6() {
        return getTestDouble();
    }

    @Override
    @Nullable
    public Float component7() {
        return getTestFloat();
    }

    @Override
    @Nullable
    public OffsetDateTime component8() {
        return getTestTimestamptz();
    }

    @Override
    @Nullable
    public LocalTime component9() {
        return getTestTime();
    }

    @Override
    @Nullable
    public OffsetTime component10() {
        return getTestTimetz();
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Override
    @Nullable
    public Object component11() {
        return getTestDaterange();
    }

    @Override
    @Nullable
    public String component12() {
        return getTestVarchar50();
    }

    @Override
    @NonNull
    public Long value1() {
        return getId();
    }

    @Override
    @Nullable
    public String value2() {
        return getTestJson();
    }

    @Override
    @Nullable
    public LocalDate value3() {
        return getTestDate();
    }

    @Override
    @Nullable
    public LocalDateTime value4() {
        return getTestTimestamp();
    }

    @Override
    @Nullable
    public Boolean value5() {
        return getTestBool();
    }

    @Override
    @Nullable
    public Double value6() {
        return getTestDouble();
    }

    @Override
    @Nullable
    public Float value7() {
        return getTestFloat();
    }

    @Override
    @Nullable
    public OffsetDateTime value8() {
        return getTestTimestamptz();
    }

    @Override
    @Nullable
    public LocalTime value9() {
        return getTestTime();
    }

    @Override
    @Nullable
    public OffsetTime value10() {
        return getTestTimetz();
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Override
    @Nullable
    public Object value11() {
        return getTestDaterange();
    }

    @Override
    @Nullable
    public String value12() {
        return getTestVarchar50();
    }

    @Override
    @NonNull
    public AppTestRecord value1(@NonNull Long value) {
        setId(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord value2(@Nullable String value) {
        setTestJson(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord value3(@Nullable LocalDate value) {
        setTestDate(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord value4(@Nullable LocalDateTime value) {
        setTestTimestamp(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord value5(@Nullable Boolean value) {
        setTestBool(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord value6(@Nullable Double value) {
        setTestDouble(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord value7(@Nullable Float value) {
        setTestFloat(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord value8(@Nullable OffsetDateTime value) {
        setTestTimestamptz(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord value9(@Nullable LocalTime value) {
        setTestTime(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord value10(@Nullable OffsetTime value) {
        setTestTimetz(value);
        return this;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Override
    @NonNull
    public AppTestRecord value11(@Nullable Object value) {
        setTestDaterange(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord value12(@Nullable String value) {
        setTestVarchar50(value);
        return this;
    }

    @Override
    @NonNull
    public AppTestRecord values(@NonNull Long value1, @Nullable String value2, @Nullable LocalDate value3, @Nullable LocalDateTime value4, @Nullable Boolean value5, @Nullable Double value6, @Nullable Float value7, @Nullable OffsetDateTime value8, @Nullable LocalTime value9, @Nullable OffsetTime value10, @Nullable Object value11, @Nullable String value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AppTestRecord
     */
    public AppTestRecord() {
        super(AppTest.APP_TEST);
    }

    /**
     * Create a detached, initialised AppTestRecord
     */
    public AppTestRecord(@NonNull Long id, @Nullable String testJson, @Nullable LocalDate testDate, @Nullable LocalDateTime testTimestamp, @Nullable Boolean testBool, @Nullable Double testDouble, @Nullable Float testFloat, @Nullable OffsetDateTime testTimestamptz, @Nullable LocalTime testTime, @Nullable OffsetTime testTimetz, @Nullable Object testDaterange, @Nullable String testVarchar50) {
        super(AppTest.APP_TEST);

        setId(id);
        setTestJson(testJson);
        setTestDate(testDate);
        setTestTimestamp(testTimestamp);
        setTestBool(testBool);
        setTestDouble(testDouble);
        setTestFloat(testFloat);
        setTestTimestamptz(testTimestamptz);
        setTestTime(testTime);
        setTestTimetz(testTimetz);
        setTestDaterange(testDaterange);
        setTestVarchar50(testVarchar50);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AppTestRecord
     */
    public AppTestRecord(com.github.alphafoxz.oneboot.app.gen.jooq.tables.pojos.AppTest value) {
        super(AppTest.APP_TEST);

        if (value != null) {
            setId(value.getId());
            setTestJson(value.getTestJson());
            setTestDate(value.getTestDate());
            setTestTimestamp(value.getTestTimestamp());
            setTestBool(value.getTestBool());
            setTestDouble(value.getTestDouble());
            setTestFloat(value.getTestFloat());
            setTestTimestamptz(value.getTestTimestamptz());
            setTestTime(value.getTestTime());
            setTestTimetz(value.getTestTimetz());
            setTestDaterange(value.getTestDaterange());
            setTestVarchar50(value.getTestVarchar50());
            resetChangedOnNotNull();
        }
    }
}
