/*
 * This file is generated by jOOQ.
 */
package com.github.alphafoxz.oneboot.app.gen.jooq.tables;


import com.github.alphafoxz.oneboot.app.gen.jooq.App;
import com.github.alphafoxz.oneboot.app.gen.jooq.Keys;
import com.github.alphafoxz.oneboot.app.gen.jooq.tables.records.AppTestRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.OffsetTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;


/**
 * 测试表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppTest extends TableImpl<AppTestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>app.app_test</code>
     */
    public static final AppTest APP_TEST = new AppTest();

    /**
     * The class holding records for this type
     */
    @Override
    @NonNull
    public Class<AppTestRecord> getRecordType() {
        return AppTestRecord.class;
    }

    /**
     * The column <code>app.app_test.id</code>. 主键
     */
    public final TableField<AppTestRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>app.app_test.test_json</code>. JSON数据
     */
    public final TableField<AppTestRecord, String> TEST_JSON = createField(DSL.name("test_json"), SQLDataType.VARCHAR, this, "JSON数据");

    /**
     * The column <code>app.app_test.test_date</code>. 测试日期
     */
    public final TableField<AppTestRecord, LocalDate> TEST_DATE = createField(DSL.name("test_date"), SQLDataType.LOCALDATE, this, "测试日期");

    /**
     * The column <code>app.app_test.test_timestamp</code>. 测试日期时间戳
     */
    public final TableField<AppTestRecord, LocalDateTime> TEST_TIMESTAMP = createField(DSL.name("test_timestamp"), SQLDataType.LOCALDATETIME(6), this, "测试日期时间戳");

    /**
     * The column <code>app.app_test.test_bool</code>. 测试布尔
     */
    public final TableField<AppTestRecord, Boolean> TEST_BOOL = createField(DSL.name("test_bool"), SQLDataType.BOOLEAN, this, "测试布尔");

    /**
     * The column <code>app.app_test.test_double</code>. 测试双精度浮点数
     */
    public final TableField<AppTestRecord, Double> TEST_DOUBLE = createField(DSL.name("test_double"), SQLDataType.DOUBLE, this, "测试双精度浮点数");

    /**
     * The column <code>app.app_test.test_float</code>. 测试单精度浮点数
     */
    public final TableField<AppTestRecord, Float> TEST_FLOAT = createField(DSL.name("test_float"), SQLDataType.REAL, this, "测试单精度浮点数");

    /**
     * The column <code>app.app_test.test_timestamptz</code>. 测试日期时间戳时区
     */
    public final TableField<AppTestRecord, OffsetDateTime> TEST_TIMESTAMPTZ = createField(DSL.name("test_timestamptz"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "测试日期时间戳时区");

    /**
     * The column <code>app.app_test.test_time</code>. 测试时间
     */
    public final TableField<AppTestRecord, LocalTime> TEST_TIME = createField(DSL.name("test_time"), SQLDataType.LOCALTIME(6), this, "测试时间");

    /**
     * The column <code>app.app_test.test_timetz</code>. 测试时间时区
     */
    public final TableField<AppTestRecord, OffsetTime> TEST_TIMETZ = createField(DSL.name("test_timetz"), SQLDataType.TIMEWITHTIMEZONE(6), this, "测试时间时区");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<AppTestRecord, Object> TEST_DATERANGE = createField(DSL.name("test_daterange"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"daterange\""), this, "测试日期区间");

    /**
     * The column <code>app.app_test.test_varchar50</code>. 测试zi
     */
    public final TableField<AppTestRecord, String> TEST_VARCHAR50 = createField(DSL.name("test_varchar50"), SQLDataType.VARCHAR(50), this, "测试zi");

    private AppTest(Name alias, Table<AppTestRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppTest(Name alias, Table<AppTestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("测试表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>app.app_test</code> table reference
     */
    public AppTest(String alias) {
        this(DSL.name(alias), APP_TEST);
    }

    /**
     * Create an aliased <code>app.app_test</code> table reference
     */
    public AppTest(Name alias) {
        this(alias, APP_TEST);
    }

    /**
     * Create a <code>app.app_test</code> table reference
     */
    public AppTest() {
        this(DSL.name("app_test"), null);
    }

    public <O extends Record> AppTest(Table<O> child, ForeignKey<O, AppTestRecord> key) {
        super(child, key, APP_TEST);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : App.APP;
    }

    @Override
    @NonNull
    public UniqueKey<AppTestRecord> getPrimaryKey() {
        return Keys.APP_TEST_PK;
    }

    @Override
    @NonNull
    public AppTest as(String alias) {
        return new AppTest(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public AppTest as(Name alias) {
        return new AppTest(alias, this);
    }

    @Override
    @NonNull
    public AppTest as(Table<?> alias) {
        return new AppTest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public AppTest rename(String name) {
        return new AppTest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public AppTest rename(Name name) {
        return new AppTest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public AppTest rename(Table<?> name) {
        return new AppTest(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row12<Long, String, LocalDate, LocalDateTime, Boolean, Double, Float, OffsetDateTime, LocalTime, OffsetTime, Object, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super String, ? super LocalDate, ? super LocalDateTime, ? super Boolean, ? super Double, ? super Float, ? super OffsetDateTime, ? super LocalTime, ? super OffsetTime, ? super Object, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super String, ? super LocalDate, ? super LocalDateTime, ? super Boolean, ? super Double, ? super Float, ? super OffsetDateTime, ? super LocalTime, ? super OffsetTime, ? super Object, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
