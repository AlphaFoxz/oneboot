/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.processing.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-09-04")
public class SdkFileInfoDto implements org.apache.thrift.TBase<SdkFileInfoDto, SdkFileInfoDto._Fields>, java.io.Serializable, Cloneable, Comparable<SdkFileInfoDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SdkFileInfoDto");

  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("parentDir", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_READ_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("isReadOnly", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField IS_EMPTY_FIELD_DESC = new org.apache.thrift.protocol.TField("isEmpty", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("children", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SdkFileInfoDtoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SdkFileInfoDtoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String filePath; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String parentDir; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String fileName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ext; // optional
  /**
   * 
   * @see com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum
   */
  public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum fileType; // required
  public boolean isReadOnly; // required
  public boolean isEmpty; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<SdkFileInfoDto> children; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_PATH((short)1, "filePath"),
    PARENT_DIR((short)3, "parentDir"),
    FILE_NAME((short)2, "fileName"),
    EXT((short)4, "ext"),
    /**
     * 
     * @see com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum
     */
    FILE_TYPE((short)5, "fileType"),
    IS_READ_ONLY((short)6, "isReadOnly"),
    IS_EMPTY((short)7, "isEmpty"),
    CHILDREN((short)8, "children");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_PATH
          return FILE_PATH;
        case 3: // PARENT_DIR
          return PARENT_DIR;
        case 2: // FILE_NAME
          return FILE_NAME;
        case 4: // EXT
          return EXT;
        case 5: // FILE_TYPE
          return FILE_TYPE;
        case 6: // IS_READ_ONLY
          return IS_READ_ONLY;
        case 7: // IS_EMPTY
          return IS_EMPTY;
        case 8: // CHILDREN
          return CHILDREN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISREADONLY_ISSET_ID = 0;
  private static final int __ISEMPTY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXT,_Fields.CHILDREN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_DIR, new org.apache.thrift.meta_data.FieldMetaData("parentDir", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum.class)));
    tmpMap.put(_Fields.IS_READ_ONLY, new org.apache.thrift.meta_data.FieldMetaData("isReadOnly", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_EMPTY, new org.apache.thrift.meta_data.FieldMetaData("isEmpty", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("children", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SdkFileInfoDto.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SdkFileInfoDto.class, metaDataMap);
  }

  public SdkFileInfoDto() {
  }

  public SdkFileInfoDto(
    java.lang.String filePath,
    java.lang.String parentDir,
    java.lang.String fileName,
    com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum fileType,
    boolean isReadOnly,
    boolean isEmpty)
  {
    this();
    this.filePath = filePath;
    this.parentDir = parentDir;
    this.fileName = fileName;
    this.fileType = fileType;
    this.isReadOnly = isReadOnly;
    setIsReadOnlyIsSet(true);
    this.isEmpty = isEmpty;
    setIsEmptyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SdkFileInfoDto(SdkFileInfoDto other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    if (other.isSetParentDir()) {
      this.parentDir = other.parentDir;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetExt()) {
      this.ext = other.ext;
    }
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
    this.isReadOnly = other.isReadOnly;
    this.isEmpty = other.isEmpty;
    if (other.isSetChildren()) {
      java.util.List<SdkFileInfoDto> __this__children = new java.util.ArrayList<SdkFileInfoDto>(other.children.size());
      for (SdkFileInfoDto other_element : other.children) {
        __this__children.add(new SdkFileInfoDto(other_element));
      }
      this.children = __this__children;
    }
  }

  @Override
  public SdkFileInfoDto deepCopy() {
    return new SdkFileInfoDto(this);
  }

  @Override
  public void clear() {
    this.filePath = null;
    this.parentDir = null;
    this.fileName = null;
    this.ext = null;
    this.fileType = null;
    setIsReadOnlyIsSet(false);
    this.isReadOnly = false;
    setIsEmptyIsSet(false);
    this.isEmpty = false;
    this.children = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFilePath() {
    return this.filePath;
  }

  public SdkFileInfoDto setFilePath(@org.apache.thrift.annotation.Nullable java.lang.String filePath) {
    this.filePath = filePath;
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParentDir() {
    return this.parentDir;
  }

  public SdkFileInfoDto setParentDir(@org.apache.thrift.annotation.Nullable java.lang.String parentDir) {
    this.parentDir = parentDir;
    return this;
  }

  public void unsetParentDir() {
    this.parentDir = null;
  }

  /** Returns true if field parentDir is set (has been assigned a value) and false otherwise */
  public boolean isSetParentDir() {
    return this.parentDir != null;
  }

  public void setParentDirIsSet(boolean value) {
    if (!value) {
      this.parentDir = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFileName() {
    return this.fileName;
  }

  public SdkFileInfoDto setFileName(@org.apache.thrift.annotation.Nullable java.lang.String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExt() {
    return this.ext;
  }

  public SdkFileInfoDto setExt(@org.apache.thrift.annotation.Nullable java.lang.String ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  /**
   * 
   * @see com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum
   */
  @org.apache.thrift.annotation.Nullable
  public com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum getFileType() {
    return this.fileType;
  }

  /**
   * 
   * @see com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum
   */
  public SdkFileInfoDto setFileType(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  public boolean isIsReadOnly() {
    return this.isReadOnly;
  }

  public SdkFileInfoDto setIsReadOnly(boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
    setIsReadOnlyIsSet(true);
    return this;
  }

  public void unsetIsReadOnly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREADONLY_ISSET_ID);
  }

  /** Returns true if field isReadOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReadOnly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREADONLY_ISSET_ID);
  }

  public void setIsReadOnlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREADONLY_ISSET_ID, value);
  }

  public boolean isIsEmpty() {
    return this.isEmpty;
  }

  public SdkFileInfoDto setIsEmpty(boolean isEmpty) {
    this.isEmpty = isEmpty;
    setIsEmptyIsSet(true);
    return this;
  }

  public void unsetIsEmpty() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISEMPTY_ISSET_ID);
  }

  /** Returns true if field isEmpty is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEmpty() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISEMPTY_ISSET_ID);
  }

  public void setIsEmptyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISEMPTY_ISSET_ID, value);
  }

  public int getChildrenSize() {
    return (this.children == null) ? 0 : this.children.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SdkFileInfoDto> getChildrenIterator() {
    return (this.children == null) ? null : this.children.iterator();
  }

  public void addToChildren(SdkFileInfoDto elem) {
    if (this.children == null) {
      this.children = new java.util.ArrayList<SdkFileInfoDto>();
    }
    this.children.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SdkFileInfoDto> getChildren() {
    return this.children;
  }

  public SdkFileInfoDto setChildren(@org.apache.thrift.annotation.Nullable java.util.List<SdkFileInfoDto> children) {
    this.children = children;
    return this;
  }

  public void unsetChildren() {
    this.children = null;
  }

  /** Returns true if field children is set (has been assigned a value) and false otherwise */
  public boolean isSetChildren() {
    return this.children != null;
  }

  public void setChildrenIsSet(boolean value) {
    if (!value) {
      this.children = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((java.lang.String)value);
      }
      break;

    case PARENT_DIR:
      if (value == null) {
        unsetParentDir();
      } else {
        setParentDir((java.lang.String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((java.lang.String)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((java.lang.String)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum)value);
      }
      break;

    case IS_READ_ONLY:
      if (value == null) {
        unsetIsReadOnly();
      } else {
        setIsReadOnly((java.lang.Boolean)value);
      }
      break;

    case IS_EMPTY:
      if (value == null) {
        unsetIsEmpty();
      } else {
        setIsEmpty((java.lang.Boolean)value);
      }
      break;

    case CHILDREN:
      if (value == null) {
        unsetChildren();
      } else {
        setChildren((java.util.List<SdkFileInfoDto>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_PATH:
      return getFilePath();

    case PARENT_DIR:
      return getParentDir();

    case FILE_NAME:
      return getFileName();

    case EXT:
      return getExt();

    case FILE_TYPE:
      return getFileType();

    case IS_READ_ONLY:
      return isIsReadOnly();

    case IS_EMPTY:
      return isIsEmpty();

    case CHILDREN:
      return getChildren();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILE_PATH:
      return isSetFilePath();
    case PARENT_DIR:
      return isSetParentDir();
    case FILE_NAME:
      return isSetFileName();
    case EXT:
      return isSetExt();
    case FILE_TYPE:
      return isSetFileType();
    case IS_READ_ONLY:
      return isSetIsReadOnly();
    case IS_EMPTY:
      return isSetIsEmpty();
    case CHILDREN:
      return isSetChildren();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SdkFileInfoDto)
      return this.equals((SdkFileInfoDto)that);
    return false;
  }

  public boolean equals(SdkFileInfoDto that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath))
        return false;
      if (!this.filePath.equals(that.filePath))
        return false;
    }

    boolean this_present_parentDir = true && this.isSetParentDir();
    boolean that_present_parentDir = true && that.isSetParentDir();
    if (this_present_parentDir || that_present_parentDir) {
      if (!(this_present_parentDir && that_present_parentDir))
        return false;
      if (!this.parentDir.equals(that.parentDir))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    boolean this_present_isReadOnly = true;
    boolean that_present_isReadOnly = true;
    if (this_present_isReadOnly || that_present_isReadOnly) {
      if (!(this_present_isReadOnly && that_present_isReadOnly))
        return false;
      if (this.isReadOnly != that.isReadOnly)
        return false;
    }

    boolean this_present_isEmpty = true;
    boolean that_present_isEmpty = true;
    if (this_present_isEmpty || that_present_isEmpty) {
      if (!(this_present_isEmpty && that_present_isEmpty))
        return false;
      if (this.isEmpty != that.isEmpty)
        return false;
    }

    boolean this_present_children = true && this.isSetChildren();
    boolean that_present_children = true && that.isSetChildren();
    if (this_present_children || that_present_children) {
      if (!(this_present_children && that_present_children))
        return false;
      if (!this.children.equals(that.children))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
    if (isSetFilePath())
      hashCode = hashCode * 8191 + filePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentDir()) ? 131071 : 524287);
    if (isSetParentDir())
      hashCode = hashCode * 8191 + parentDir.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
    if (isSetFileName())
      hashCode = hashCode * 8191 + fileName.hashCode();

    hashCode = hashCode * 8191 + ((isSetExt()) ? 131071 : 524287);
    if (isSetExt())
      hashCode = hashCode * 8191 + ext.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileType()) ? 131071 : 524287);
    if (isSetFileType())
      hashCode = hashCode * 8191 + fileType.getValue();

    hashCode = hashCode * 8191 + ((isReadOnly) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isEmpty) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetChildren()) ? 131071 : 524287);
    if (isSetChildren())
      hashCode = hashCode * 8191 + children.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SdkFileInfoDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFilePath(), other.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParentDir(), other.isSetParentDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentDir, other.parentDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileName(), other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExt(), other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileType(), other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsReadOnly(), other.isSetIsReadOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReadOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReadOnly, other.isReadOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsEmpty(), other.isSetIsEmpty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEmpty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEmpty, other.isEmpty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChildren(), other.isSetChildren());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildren()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.children, other.children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SdkFileInfoDto(");
    boolean first = true;

    sb.append("filePath:");
    if (this.filePath == null) {
      sb.append("null");
    } else {
      sb.append(this.filePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentDir:");
    if (this.parentDir == null) {
      sb.append("null");
    } else {
      sb.append(this.parentDir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (isSetExt()) {
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("fileType:");
    if (this.fileType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReadOnly:");
    sb.append(this.isReadOnly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEmpty:");
    sb.append(this.isEmpty);
    first = false;
    if (isSetChildren()) {
      if (!first) sb.append(", ");
      sb.append("children:");
      if (this.children == null) {
        sb.append("null");
      } else {
        sb.append(this.children);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (filePath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filePath' was not present! Struct: " + toString());
    }
    if (parentDir == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parentDir' was not present! Struct: " + toString());
    }
    if (fileName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileName' was not present! Struct: " + toString());
    }
    if (fileType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isReadOnly' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isEmpty' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SdkFileInfoDtoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SdkFileInfoDtoStandardScheme getScheme() {
      return new SdkFileInfoDtoStandardScheme();
    }
  }

  private static class SdkFileInfoDtoStandardScheme extends org.apache.thrift.scheme.StandardScheme<SdkFileInfoDto> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SdkFileInfoDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePath = iprot.readString();
              struct.setFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentDir = iprot.readString();
              struct.setParentDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ext = iprot.readString();
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileType = com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum.findByValue(iprot.readI32());
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_READ_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isReadOnly = iprot.readBool();
              struct.setIsReadOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_EMPTY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEmpty = iprot.readBool();
              struct.setIsEmptyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.children = new java.util.ArrayList<SdkFileInfoDto>(_list0.size);
                @org.apache.thrift.annotation.Nullable SdkFileInfoDto _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new SdkFileInfoDto();
                  _elem1.read(iprot);
                  struct.children.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setChildrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsReadOnly()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isReadOnly' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsEmpty()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isEmpty' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SdkFileInfoDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.filePath != null) {
        oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.filePath);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.parentDir != null) {
        oprot.writeFieldBegin(PARENT_DIR_FIELD_DESC);
        oprot.writeString(struct.parentDir);
        oprot.writeFieldEnd();
      }
      if (struct.ext != null) {
        if (struct.isSetExt()) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileType != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fileType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_READ_ONLY_FIELD_DESC);
      oprot.writeBool(struct.isReadOnly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_EMPTY_FIELD_DESC);
      oprot.writeBool(struct.isEmpty);
      oprot.writeFieldEnd();
      if (struct.children != null) {
        if (struct.isSetChildren()) {
          oprot.writeFieldBegin(CHILDREN_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.children.size()));
            for (SdkFileInfoDto _iter3 : struct.children)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SdkFileInfoDtoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SdkFileInfoDtoTupleScheme getScheme() {
      return new SdkFileInfoDtoTupleScheme();
    }
  }

  private static class SdkFileInfoDtoTupleScheme extends org.apache.thrift.scheme.TupleScheme<SdkFileInfoDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SdkFileInfoDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.filePath);
      oprot.writeString(struct.parentDir);
      oprot.writeString(struct.fileName);
      oprot.writeI32(struct.fileType.getValue());
      oprot.writeBool(struct.isReadOnly);
      oprot.writeBool(struct.isEmpty);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExt()) {
        optionals.set(0);
      }
      if (struct.isSetChildren()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetExt()) {
        oprot.writeString(struct.ext);
      }
      if (struct.isSetChildren()) {
        {
          oprot.writeI32(struct.children.size());
          for (SdkFileInfoDto _iter4 : struct.children)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SdkFileInfoDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.filePath = iprot.readString();
      struct.setFilePathIsSet(true);
      struct.parentDir = iprot.readString();
      struct.setParentDirIsSet(true);
      struct.fileName = iprot.readString();
      struct.setFileNameIsSet(true);
      struct.fileType = com.github.alphafoxz.oneboot.sdk.gen.thrift.enums.SdkFileTypeEnum.findByValue(iprot.readI32());
      struct.setFileTypeIsSet(true);
      struct.isReadOnly = iprot.readBool();
      struct.setIsReadOnlyIsSet(true);
      struct.isEmpty = iprot.readBool();
      struct.setIsEmptyIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.ext = iprot.readString();
        struct.setExtIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.children = new java.util.ArrayList<SdkFileInfoDto>(_list5.size);
          @org.apache.thrift.annotation.Nullable SdkFileInfoDto _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new SdkFileInfoDto();
            _elem6.read(iprot);
            struct.children.add(_elem6);
          }
        }
        struct.setChildrenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

