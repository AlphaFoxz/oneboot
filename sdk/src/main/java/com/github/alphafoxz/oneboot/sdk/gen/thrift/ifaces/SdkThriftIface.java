/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.alphafoxz.oneboot.sdk.gen.thrift.ifaces;

@javax.annotation.processing.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-09-04")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SdkThriftIface {

  public interface Iface {

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto getServerPort() throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getExecutableFilePath() throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto getTemplateContentByPath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto) throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto getTemplateContentByIncludePath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto templatePathDto, java.lang.String includePath) throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto getRestfulTemplateFileTree() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getServerPort(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void getExecutableFilePath(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void getTemplateContentByPath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void getTemplateContentByIncludePath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto templatePathDto, java.lang.String includePath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void getRestfulTemplateFileTree(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto getServerPort() throws org.apache.thrift.TException
    {
      send_getServerPort();
      return recv_getServerPort();
    }

    public void send_getServerPort() throws org.apache.thrift.TException
    {
      getServerPort_args args = new getServerPort_args();
      sendBase("getServerPort", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto recv_getServerPort() throws org.apache.thrift.TException
    {
      getServerPort_result result = new getServerPort_result();
      receiveBase(result, "getServerPort");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServerPort failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getExecutableFilePath() throws org.apache.thrift.TException
    {
      send_getExecutableFilePath();
      return recv_getExecutableFilePath();
    }

    public void send_getExecutableFilePath() throws org.apache.thrift.TException
    {
      getExecutableFilePath_args args = new getExecutableFilePath_args();
      sendBase("getExecutableFilePath", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto recv_getExecutableFilePath() throws org.apache.thrift.TException
    {
      getExecutableFilePath_result result = new getExecutableFilePath_result();
      receiveBase(result, "getExecutableFilePath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExecutableFilePath failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto getTemplateContentByPath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto) throws org.apache.thrift.TException
    {
      send_getTemplateContentByPath(pathDto);
      return recv_getTemplateContentByPath();
    }

    public void send_getTemplateContentByPath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto) throws org.apache.thrift.TException
    {
      getTemplateContentByPath_args args = new getTemplateContentByPath_args();
      args.setPathDto(pathDto);
      sendBase("getTemplateContentByPath", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto recv_getTemplateContentByPath() throws org.apache.thrift.TException
    {
      getTemplateContentByPath_result result = new getTemplateContentByPath_result();
      receiveBase(result, "getTemplateContentByPath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTemplateContentByPath failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto getTemplateContentByIncludePath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto templatePathDto, java.lang.String includePath) throws org.apache.thrift.TException
    {
      send_getTemplateContentByIncludePath(templatePathDto, includePath);
      return recv_getTemplateContentByIncludePath();
    }

    public void send_getTemplateContentByIncludePath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto templatePathDto, java.lang.String includePath) throws org.apache.thrift.TException
    {
      getTemplateContentByIncludePath_args args = new getTemplateContentByIncludePath_args();
      args.setTemplatePathDto(templatePathDto);
      args.setIncludePath(includePath);
      sendBase("getTemplateContentByIncludePath", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto recv_getTemplateContentByIncludePath() throws org.apache.thrift.TException
    {
      getTemplateContentByIncludePath_result result = new getTemplateContentByIncludePath_result();
      receiveBase(result, "getTemplateContentByIncludePath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTemplateContentByIncludePath failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto getRestfulTemplateFileTree() throws org.apache.thrift.TException
    {
      send_getRestfulTemplateFileTree();
      return recv_getRestfulTemplateFileTree();
    }

    public void send_getRestfulTemplateFileTree() throws org.apache.thrift.TException
    {
      getRestfulTemplateFileTree_args args = new getRestfulTemplateFileTree_args();
      sendBase("getRestfulTemplateFileTree", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto recv_getRestfulTemplateFileTree() throws org.apache.thrift.TException
    {
      getRestfulTemplateFileTree_result result = new getRestfulTemplateFileTree_result();
      receiveBase(result, "getRestfulTemplateFileTree");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRestfulTemplateFileTree failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void getServerPort(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getServerPort_call method_call = new getServerPort_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getServerPort_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto> {
      public getServerPort_call(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServerPort", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getServerPort_args args = new getServerPort_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getServerPort();
      }
    }

    @Override
    public void getExecutableFilePath(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExecutableFilePath_call method_call = new getExecutableFilePath_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExecutableFilePath_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      public getExecutableFilePath_call(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExecutableFilePath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExecutableFilePath_args args = new getExecutableFilePath_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExecutableFilePath();
      }
    }

    @Override
    public void getTemplateContentByPath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTemplateContentByPath_call method_call = new getTemplateContentByPath_call(pathDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTemplateContentByPath_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> {
      private com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto;
      public getTemplateContentByPath_call(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pathDto = pathDto;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTemplateContentByPath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTemplateContentByPath_args args = new getTemplateContentByPath_args();
        args.setPathDto(pathDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTemplateContentByPath();
      }
    }

    @Override
    public void getTemplateContentByIncludePath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto templatePathDto, java.lang.String includePath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTemplateContentByIncludePath_call method_call = new getTemplateContentByIncludePath_call(templatePathDto, includePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTemplateContentByIncludePath_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> {
      private com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto templatePathDto;
      private java.lang.String includePath;
      public getTemplateContentByIncludePath_call(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto templatePathDto, java.lang.String includePath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.templatePathDto = templatePathDto;
        this.includePath = includePath;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTemplateContentByIncludePath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTemplateContentByIncludePath_args args = new getTemplateContentByIncludePath_args();
        args.setTemplatePathDto(templatePathDto);
        args.setIncludePath(includePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTemplateContentByIncludePath();
      }
    }

    @Override
    public void getRestfulTemplateFileTree(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRestfulTemplateFileTree_call method_call = new getRestfulTemplateFileTree_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRestfulTemplateFileTree_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto> {
      public getRestfulTemplateFileTree_call(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRestfulTemplateFileTree", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRestfulTemplateFileTree_args args = new getRestfulTemplateFileTree_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRestfulTemplateFileTree();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getServerPort", new getServerPort());
      processMap.put("getExecutableFilePath", new getExecutableFilePath());
      processMap.put("getTemplateContentByPath", new getTemplateContentByPath());
      processMap.put("getTemplateContentByIncludePath", new getTemplateContentByIncludePath());
      processMap.put("getRestfulTemplateFileTree", new getRestfulTemplateFileTree());
      return processMap;
    }

    public static class getServerPort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServerPort_args> {
      public getServerPort() {
        super("getServerPort");
      }

      @Override
      public getServerPort_args getEmptyArgsInstance() {
        return new getServerPort_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getServerPort_result getResult(I iface, getServerPort_args args) throws org.apache.thrift.TException {
        getServerPort_result result = new getServerPort_result();
        result.success = iface.getServerPort();
        return result;
      }
    }

    public static class getExecutableFilePath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExecutableFilePath_args> {
      public getExecutableFilePath() {
        super("getExecutableFilePath");
      }

      @Override
      public getExecutableFilePath_args getEmptyArgsInstance() {
        return new getExecutableFilePath_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getExecutableFilePath_result getResult(I iface, getExecutableFilePath_args args) throws org.apache.thrift.TException {
        getExecutableFilePath_result result = new getExecutableFilePath_result();
        result.success = iface.getExecutableFilePath();
        return result;
      }
    }

    public static class getTemplateContentByPath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTemplateContentByPath_args> {
      public getTemplateContentByPath() {
        super("getTemplateContentByPath");
      }

      @Override
      public getTemplateContentByPath_args getEmptyArgsInstance() {
        return new getTemplateContentByPath_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getTemplateContentByPath_result getResult(I iface, getTemplateContentByPath_args args) throws org.apache.thrift.TException {
        getTemplateContentByPath_result result = new getTemplateContentByPath_result();
        result.success = iface.getTemplateContentByPath(args.pathDto);
        return result;
      }
    }

    public static class getTemplateContentByIncludePath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTemplateContentByIncludePath_args> {
      public getTemplateContentByIncludePath() {
        super("getTemplateContentByIncludePath");
      }

      @Override
      public getTemplateContentByIncludePath_args getEmptyArgsInstance() {
        return new getTemplateContentByIncludePath_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getTemplateContentByIncludePath_result getResult(I iface, getTemplateContentByIncludePath_args args) throws org.apache.thrift.TException {
        getTemplateContentByIncludePath_result result = new getTemplateContentByIncludePath_result();
        result.success = iface.getTemplateContentByIncludePath(args.templatePathDto, args.includePath);
        return result;
      }
    }

    public static class getRestfulTemplateFileTree<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRestfulTemplateFileTree_args> {
      public getRestfulTemplateFileTree() {
        super("getRestfulTemplateFileTree");
      }

      @Override
      public getRestfulTemplateFileTree_args getEmptyArgsInstance() {
        return new getRestfulTemplateFileTree_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getRestfulTemplateFileTree_result getResult(I iface, getRestfulTemplateFileTree_args args) throws org.apache.thrift.TException {
        getRestfulTemplateFileTree_result result = new getRestfulTemplateFileTree_result();
        result.success = iface.getRestfulTemplateFileTree();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getServerPort", new getServerPort());
      processMap.put("getExecutableFilePath", new getExecutableFilePath());
      processMap.put("getTemplateContentByPath", new getTemplateContentByPath());
      processMap.put("getTemplateContentByIncludePath", new getTemplateContentByIncludePath());
      processMap.put("getRestfulTemplateFileTree", new getRestfulTemplateFileTree());
      return processMap;
    }

    public static class getServerPort<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getServerPort_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto> {
      public getServerPort() {
        super("getServerPort");
      }

      @Override
      public getServerPort_args getEmptyArgsInstance() {
        return new getServerPort_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto o) {
            getServerPort_result result = new getServerPort_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getServerPort_result result = new getServerPort_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getServerPort_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.getServerPort(resultHandler);
      }
    }

    public static class getExecutableFilePath<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExecutableFilePath_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      public getExecutableFilePath() {
        super("getExecutableFilePath");
      }

      @Override
      public getExecutableFilePath_args getEmptyArgsInstance() {
        return new getExecutableFilePath_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto o) {
            getExecutableFilePath_result result = new getExecutableFilePath_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getExecutableFilePath_result result = new getExecutableFilePath_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getExecutableFilePath_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.getExecutableFilePath(resultHandler);
      }
    }

    public static class getTemplateContentByPath<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTemplateContentByPath_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> {
      public getTemplateContentByPath() {
        super("getTemplateContentByPath");
      }

      @Override
      public getTemplateContentByPath_args getEmptyArgsInstance() {
        return new getTemplateContentByPath_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto o) {
            getTemplateContentByPath_result result = new getTemplateContentByPath_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTemplateContentByPath_result result = new getTemplateContentByPath_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getTemplateContentByPath_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.getTemplateContentByPath(args.pathDto,resultHandler);
      }
    }

    public static class getTemplateContentByIncludePath<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTemplateContentByIncludePath_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> {
      public getTemplateContentByIncludePath() {
        super("getTemplateContentByIncludePath");
      }

      @Override
      public getTemplateContentByIncludePath_args getEmptyArgsInstance() {
        return new getTemplateContentByIncludePath_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto o) {
            getTemplateContentByIncludePath_result result = new getTemplateContentByIncludePath_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTemplateContentByIncludePath_result result = new getTemplateContentByIncludePath_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getTemplateContentByIncludePath_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.getTemplateContentByIncludePath(args.templatePathDto, args.includePath,resultHandler);
      }
    }

    public static class getRestfulTemplateFileTree<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRestfulTemplateFileTree_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto> {
      public getRestfulTemplateFileTree() {
        super("getRestfulTemplateFileTree");
      }

      @Override
      public getRestfulTemplateFileTree_args getEmptyArgsInstance() {
        return new getRestfulTemplateFileTree_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto o) {
            getRestfulTemplateFileTree_result result = new getRestfulTemplateFileTree_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRestfulTemplateFileTree_result result = new getRestfulTemplateFileTree_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getRestfulTemplateFileTree_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.getRestfulTemplateFileTree(resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getServerPort_args implements org.apache.thrift.TBase<getServerPort_args, getServerPort_args._Fields>, java.io.Serializable, Cloneable, Comparable<getServerPort_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerPort_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getServerPort_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getServerPort_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerPort_args.class, metaDataMap);
    }

    public getServerPort_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerPort_args(getServerPort_args other) {
    }

    @Override
    public getServerPort_args deepCopy() {
      return new getServerPort_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getServerPort_args)
        return this.equals((getServerPort_args)that);
      return false;
    }

    public boolean equals(getServerPort_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getServerPort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getServerPort_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerPort_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getServerPort_argsStandardScheme getScheme() {
        return new getServerPort_argsStandardScheme();
      }
    }

    private static class getServerPort_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getServerPort_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerPort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerPort_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerPort_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getServerPort_argsTupleScheme getScheme() {
        return new getServerPort_argsTupleScheme();
      }
    }

    private static class getServerPort_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getServerPort_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerPort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerPort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getServerPort_result implements org.apache.thrift.TBase<getServerPort_result, getServerPort_result._Fields>, java.io.Serializable, Cloneable, Comparable<getServerPort_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerPort_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getServerPort_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getServerPort_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerPort_result.class, metaDataMap);
    }

    public getServerPort_result() {
    }

    public getServerPort_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerPort_result(getServerPort_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto(other.success);
      }
    }

    @Override
    public getServerPort_result deepCopy() {
      return new getServerPort_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto getSuccess() {
      return this.success;
    }

    public getServerPort_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getServerPort_result)
        return this.equals((getServerPort_result)that);
      return false;
    }

    public boolean equals(getServerPort_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getServerPort_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getServerPort_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerPort_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getServerPort_resultStandardScheme getScheme() {
        return new getServerPort_resultStandardScheme();
      }
    }

    private static class getServerPort_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getServerPort_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerPort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerPort_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerPort_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getServerPort_resultTupleScheme getScheme() {
        return new getServerPort_resultTupleScheme();
      }
    }

    private static class getServerPort_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getServerPort_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerPort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerPort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkLongResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getExecutableFilePath_args implements org.apache.thrift.TBase<getExecutableFilePath_args, getExecutableFilePath_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExecutableFilePath_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExecutableFilePath_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExecutableFilePath_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExecutableFilePath_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExecutableFilePath_args.class, metaDataMap);
    }

    public getExecutableFilePath_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExecutableFilePath_args(getExecutableFilePath_args other) {
    }

    @Override
    public getExecutableFilePath_args deepCopy() {
      return new getExecutableFilePath_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getExecutableFilePath_args)
        return this.equals((getExecutableFilePath_args)that);
      return false;
    }

    public boolean equals(getExecutableFilePath_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getExecutableFilePath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getExecutableFilePath_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExecutableFilePath_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExecutableFilePath_argsStandardScheme getScheme() {
        return new getExecutableFilePath_argsStandardScheme();
      }
    }

    private static class getExecutableFilePath_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExecutableFilePath_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getExecutableFilePath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getExecutableFilePath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExecutableFilePath_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExecutableFilePath_argsTupleScheme getScheme() {
        return new getExecutableFilePath_argsTupleScheme();
      }
    }

    private static class getExecutableFilePath_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExecutableFilePath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExecutableFilePath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExecutableFilePath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getExecutableFilePath_result implements org.apache.thrift.TBase<getExecutableFilePath_result, getExecutableFilePath_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExecutableFilePath_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExecutableFilePath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExecutableFilePath_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExecutableFilePath_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExecutableFilePath_result.class, metaDataMap);
    }

    public getExecutableFilePath_result() {
    }

    public getExecutableFilePath_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExecutableFilePath_result(getExecutableFilePath_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto(other.success);
      }
    }

    @Override
    public getExecutableFilePath_result deepCopy() {
      return new getExecutableFilePath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getSuccess() {
      return this.success;
    }

    public getExecutableFilePath_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getExecutableFilePath_result)
        return this.equals((getExecutableFilePath_result)that);
      return false;
    }

    public boolean equals(getExecutableFilePath_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getExecutableFilePath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getExecutableFilePath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExecutableFilePath_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExecutableFilePath_resultStandardScheme getScheme() {
        return new getExecutableFilePath_resultStandardScheme();
      }
    }

    private static class getExecutableFilePath_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExecutableFilePath_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getExecutableFilePath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getExecutableFilePath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExecutableFilePath_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExecutableFilePath_resultTupleScheme getScheme() {
        return new getExecutableFilePath_resultTupleScheme();
      }
    }

    private static class getExecutableFilePath_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExecutableFilePath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExecutableFilePath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExecutableFilePath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getTemplateContentByPath_args implements org.apache.thrift.TBase<getTemplateContentByPath_args, getTemplateContentByPath_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTemplateContentByPath_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTemplateContentByPath_args");

    private static final org.apache.thrift.protocol.TField PATH_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("pathDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTemplateContentByPath_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTemplateContentByPath_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH_DTO((short)1, "pathDto");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH_DTO
            return PATH_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH_DTO, new org.apache.thrift.meta_data.FieldMetaData("pathDto", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTemplateContentByPath_args.class, metaDataMap);
    }

    public getTemplateContentByPath_args() {
    }

    public getTemplateContentByPath_args(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto)
    {
      this();
      this.pathDto = pathDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTemplateContentByPath_args(getTemplateContentByPath_args other) {
      if (other.isSetPathDto()) {
        this.pathDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto(other.pathDto);
      }
    }

    @Override
    public getTemplateContentByPath_args deepCopy() {
      return new getTemplateContentByPath_args(this);
    }

    @Override
    public void clear() {
      this.pathDto = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto getPathDto() {
      return this.pathDto;
    }

    public getTemplateContentByPath_args setPathDto(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto) {
      this.pathDto = pathDto;
      return this;
    }

    public void unsetPathDto() {
      this.pathDto = null;
    }

    /** Returns true if field pathDto is set (has been assigned a value) and false otherwise */
    public boolean isSetPathDto() {
      return this.pathDto != null;
    }

    public void setPathDtoIsSet(boolean value) {
      if (!value) {
        this.pathDto = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PATH_DTO:
        if (value == null) {
          unsetPathDto();
        } else {
          setPathDto((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH_DTO:
        return getPathDto();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATH_DTO:
        return isSetPathDto();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getTemplateContentByPath_args)
        return this.equals((getTemplateContentByPath_args)that);
      return false;
    }

    public boolean equals(getTemplateContentByPath_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pathDto = true && this.isSetPathDto();
      boolean that_present_pathDto = true && that.isSetPathDto();
      if (this_present_pathDto || that_present_pathDto) {
        if (!(this_present_pathDto && that_present_pathDto))
          return false;
        if (!this.pathDto.equals(that.pathDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPathDto()) ? 131071 : 524287);
      if (isSetPathDto())
        hashCode = hashCode * 8191 + pathDto.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTemplateContentByPath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetPathDto(), other.isSetPathDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPathDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pathDto, other.pathDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTemplateContentByPath_args(");
      boolean first = true;

      sb.append("pathDto:");
      if (this.pathDto == null) {
        sb.append("null");
      } else {
        sb.append(this.pathDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (pathDto == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pathDto' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (pathDto != null) {
        pathDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTemplateContentByPath_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByPath_argsStandardScheme getScheme() {
        return new getTemplateContentByPath_argsStandardScheme();
      }
    }

    private static class getTemplateContentByPath_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTemplateContentByPath_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getTemplateContentByPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pathDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
                struct.pathDto.read(iprot);
                struct.setPathDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getTemplateContentByPath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pathDto != null) {
          oprot.writeFieldBegin(PATH_DTO_FIELD_DESC);
          struct.pathDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTemplateContentByPath_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByPath_argsTupleScheme getScheme() {
        return new getTemplateContentByPath_argsTupleScheme();
      }
    }

    private static class getTemplateContentByPath_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTemplateContentByPath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.pathDto.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.pathDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
        struct.pathDto.read(iprot);
        struct.setPathDtoIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getTemplateContentByPath_result implements org.apache.thrift.TBase<getTemplateContentByPath_result, getTemplateContentByPath_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTemplateContentByPath_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTemplateContentByPath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTemplateContentByPath_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTemplateContentByPath_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTemplateContentByPath_result.class, metaDataMap);
    }

    public getTemplateContentByPath_result() {
    }

    public getTemplateContentByPath_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTemplateContentByPath_result(getTemplateContentByPath_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto(other.success);
      }
    }

    @Override
    public getTemplateContentByPath_result deepCopy() {
      return new getTemplateContentByPath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto getSuccess() {
      return this.success;
    }

    public getTemplateContentByPath_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getTemplateContentByPath_result)
        return this.equals((getTemplateContentByPath_result)that);
      return false;
    }

    public boolean equals(getTemplateContentByPath_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTemplateContentByPath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTemplateContentByPath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTemplateContentByPath_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByPath_resultStandardScheme getScheme() {
        return new getTemplateContentByPath_resultStandardScheme();
      }
    }

    private static class getTemplateContentByPath_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTemplateContentByPath_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getTemplateContentByPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getTemplateContentByPath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTemplateContentByPath_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByPath_resultTupleScheme getScheme() {
        return new getTemplateContentByPath_resultTupleScheme();
      }
    }

    private static class getTemplateContentByPath_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTemplateContentByPath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getTemplateContentByIncludePath_args implements org.apache.thrift.TBase<getTemplateContentByIncludePath_args, getTemplateContentByIncludePath_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTemplateContentByIncludePath_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTemplateContentByIncludePath_args");

    private static final org.apache.thrift.protocol.TField TEMPLATE_PATH_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("templatePathDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INCLUDE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("includePath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTemplateContentByIncludePath_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTemplateContentByIncludePath_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto templatePathDto; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String includePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEMPLATE_PATH_DTO((short)1, "templatePathDto"),
      INCLUDE_PATH((short)2, "includePath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEMPLATE_PATH_DTO
            return TEMPLATE_PATH_DTO;
          case 2: // INCLUDE_PATH
            return INCLUDE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEMPLATE_PATH_DTO, new org.apache.thrift.meta_data.FieldMetaData("templatePathDto", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto.class)));
      tmpMap.put(_Fields.INCLUDE_PATH, new org.apache.thrift.meta_data.FieldMetaData("includePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTemplateContentByIncludePath_args.class, metaDataMap);
    }

    public getTemplateContentByIncludePath_args() {
    }

    public getTemplateContentByIncludePath_args(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto templatePathDto,
      java.lang.String includePath)
    {
      this();
      this.templatePathDto = templatePathDto;
      this.includePath = includePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTemplateContentByIncludePath_args(getTemplateContentByIncludePath_args other) {
      if (other.isSetTemplatePathDto()) {
        this.templatePathDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto(other.templatePathDto);
      }
      if (other.isSetIncludePath()) {
        this.includePath = other.includePath;
      }
    }

    @Override
    public getTemplateContentByIncludePath_args deepCopy() {
      return new getTemplateContentByIncludePath_args(this);
    }

    @Override
    public void clear() {
      this.templatePathDto = null;
      this.includePath = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto getTemplatePathDto() {
      return this.templatePathDto;
    }

    public getTemplateContentByIncludePath_args setTemplatePathDto(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto templatePathDto) {
      this.templatePathDto = templatePathDto;
      return this;
    }

    public void unsetTemplatePathDto() {
      this.templatePathDto = null;
    }

    /** Returns true if field templatePathDto is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplatePathDto() {
      return this.templatePathDto != null;
    }

    public void setTemplatePathDtoIsSet(boolean value) {
      if (!value) {
        this.templatePathDto = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getIncludePath() {
      return this.includePath;
    }

    public getTemplateContentByIncludePath_args setIncludePath(@org.apache.thrift.annotation.Nullable java.lang.String includePath) {
      this.includePath = includePath;
      return this;
    }

    public void unsetIncludePath() {
      this.includePath = null;
    }

    /** Returns true if field includePath is set (has been assigned a value) and false otherwise */
    public boolean isSetIncludePath() {
      return this.includePath != null;
    }

    public void setIncludePathIsSet(boolean value) {
      if (!value) {
        this.includePath = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TEMPLATE_PATH_DTO:
        if (value == null) {
          unsetTemplatePathDto();
        } else {
          setTemplatePathDto((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto)value);
        }
        break;

      case INCLUDE_PATH:
        if (value == null) {
          unsetIncludePath();
        } else {
          setIncludePath((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TEMPLATE_PATH_DTO:
        return getTemplatePathDto();

      case INCLUDE_PATH:
        return getIncludePath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TEMPLATE_PATH_DTO:
        return isSetTemplatePathDto();
      case INCLUDE_PATH:
        return isSetIncludePath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getTemplateContentByIncludePath_args)
        return this.equals((getTemplateContentByIncludePath_args)that);
      return false;
    }

    public boolean equals(getTemplateContentByIncludePath_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_templatePathDto = true && this.isSetTemplatePathDto();
      boolean that_present_templatePathDto = true && that.isSetTemplatePathDto();
      if (this_present_templatePathDto || that_present_templatePathDto) {
        if (!(this_present_templatePathDto && that_present_templatePathDto))
          return false;
        if (!this.templatePathDto.equals(that.templatePathDto))
          return false;
      }

      boolean this_present_includePath = true && this.isSetIncludePath();
      boolean that_present_includePath = true && that.isSetIncludePath();
      if (this_present_includePath || that_present_includePath) {
        if (!(this_present_includePath && that_present_includePath))
          return false;
        if (!this.includePath.equals(that.includePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTemplatePathDto()) ? 131071 : 524287);
      if (isSetTemplatePathDto())
        hashCode = hashCode * 8191 + templatePathDto.hashCode();

      hashCode = hashCode * 8191 + ((isSetIncludePath()) ? 131071 : 524287);
      if (isSetIncludePath())
        hashCode = hashCode * 8191 + includePath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTemplateContentByIncludePath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTemplatePathDto(), other.isSetTemplatePathDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplatePathDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templatePathDto, other.templatePathDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIncludePath(), other.isSetIncludePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIncludePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includePath, other.includePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTemplateContentByIncludePath_args(");
      boolean first = true;

      sb.append("templatePathDto:");
      if (this.templatePathDto == null) {
        sb.append("null");
      } else {
        sb.append(this.templatePathDto);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("includePath:");
      if (this.includePath == null) {
        sb.append("null");
      } else {
        sb.append(this.includePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (templatePathDto == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'templatePathDto' was not present! Struct: " + toString());
      }
      if (includePath == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'includePath' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (templatePathDto != null) {
        templatePathDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTemplateContentByIncludePath_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByIncludePath_argsStandardScheme getScheme() {
        return new getTemplateContentByIncludePath_argsStandardScheme();
      }
    }

    private static class getTemplateContentByIncludePath_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTemplateContentByIncludePath_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getTemplateContentByIncludePath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEMPLATE_PATH_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.templatePathDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
                struct.templatePathDto.read(iprot);
                struct.setTemplatePathDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INCLUDE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.includePath = iprot.readString();
                struct.setIncludePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getTemplateContentByIncludePath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.templatePathDto != null) {
          oprot.writeFieldBegin(TEMPLATE_PATH_DTO_FIELD_DESC);
          struct.templatePathDto.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.includePath != null) {
          oprot.writeFieldBegin(INCLUDE_PATH_FIELD_DESC);
          oprot.writeString(struct.includePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTemplateContentByIncludePath_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByIncludePath_argsTupleScheme getScheme() {
        return new getTemplateContentByIncludePath_argsTupleScheme();
      }
    }

    private static class getTemplateContentByIncludePath_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTemplateContentByIncludePath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByIncludePath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.templatePathDto.write(oprot);
        oprot.writeString(struct.includePath);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByIncludePath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.templatePathDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
        struct.templatePathDto.read(iprot);
        struct.setTemplatePathDtoIsSet(true);
        struct.includePath = iprot.readString();
        struct.setIncludePathIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getTemplateContentByIncludePath_result implements org.apache.thrift.TBase<getTemplateContentByIncludePath_result, getTemplateContentByIncludePath_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTemplateContentByIncludePath_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTemplateContentByIncludePath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTemplateContentByIncludePath_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTemplateContentByIncludePath_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTemplateContentByIncludePath_result.class, metaDataMap);
    }

    public getTemplateContentByIncludePath_result() {
    }

    public getTemplateContentByIncludePath_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTemplateContentByIncludePath_result(getTemplateContentByIncludePath_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto(other.success);
      }
    }

    @Override
    public getTemplateContentByIncludePath_result deepCopy() {
      return new getTemplateContentByIncludePath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto getSuccess() {
      return this.success;
    }

    public getTemplateContentByIncludePath_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getTemplateContentByIncludePath_result)
        return this.equals((getTemplateContentByIncludePath_result)that);
      return false;
    }

    public boolean equals(getTemplateContentByIncludePath_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTemplateContentByIncludePath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTemplateContentByIncludePath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTemplateContentByIncludePath_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByIncludePath_resultStandardScheme getScheme() {
        return new getTemplateContentByIncludePath_resultStandardScheme();
      }
    }

    private static class getTemplateContentByIncludePath_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTemplateContentByIncludePath_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getTemplateContentByIncludePath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getTemplateContentByIncludePath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTemplateContentByIncludePath_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByIncludePath_resultTupleScheme getScheme() {
        return new getTemplateContentByIncludePath_resultTupleScheme();
      }
    }

    private static class getTemplateContentByIncludePath_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTemplateContentByIncludePath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByIncludePath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByIncludePath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkThriftTemplateResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getRestfulTemplateFileTree_args implements org.apache.thrift.TBase<getRestfulTemplateFileTree_args, getRestfulTemplateFileTree_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRestfulTemplateFileTree_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRestfulTemplateFileTree_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRestfulTemplateFileTree_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRestfulTemplateFileTree_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRestfulTemplateFileTree_args.class, metaDataMap);
    }

    public getRestfulTemplateFileTree_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRestfulTemplateFileTree_args(getRestfulTemplateFileTree_args other) {
    }

    @Override
    public getRestfulTemplateFileTree_args deepCopy() {
      return new getRestfulTemplateFileTree_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getRestfulTemplateFileTree_args)
        return this.equals((getRestfulTemplateFileTree_args)that);
      return false;
    }

    public boolean equals(getRestfulTemplateFileTree_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getRestfulTemplateFileTree_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRestfulTemplateFileTree_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRestfulTemplateFileTree_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getRestfulTemplateFileTree_argsStandardScheme getScheme() {
        return new getRestfulTemplateFileTree_argsStandardScheme();
      }
    }

    private static class getRestfulTemplateFileTree_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRestfulTemplateFileTree_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getRestfulTemplateFileTree_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getRestfulTemplateFileTree_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRestfulTemplateFileTree_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getRestfulTemplateFileTree_argsTupleScheme getScheme() {
        return new getRestfulTemplateFileTree_argsTupleScheme();
      }
    }

    private static class getRestfulTemplateFileTree_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRestfulTemplateFileTree_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRestfulTemplateFileTree_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRestfulTemplateFileTree_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getRestfulTemplateFileTree_result implements org.apache.thrift.TBase<getRestfulTemplateFileTree_result, getRestfulTemplateFileTree_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRestfulTemplateFileTree_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRestfulTemplateFileTree_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRestfulTemplateFileTree_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRestfulTemplateFileTree_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRestfulTemplateFileTree_result.class, metaDataMap);
    }

    public getRestfulTemplateFileTree_result() {
    }

    public getRestfulTemplateFileTree_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRestfulTemplateFileTree_result(getRestfulTemplateFileTree_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto(other.success);
      }
    }

    @Override
    public getRestfulTemplateFileTree_result deepCopy() {
      return new getRestfulTemplateFileTree_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto getSuccess() {
      return this.success;
    }

    public getRestfulTemplateFileTree_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getRestfulTemplateFileTree_result)
        return this.equals((getRestfulTemplateFileTree_result)that);
      return false;
    }

    public boolean equals(getRestfulTemplateFileTree_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRestfulTemplateFileTree_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRestfulTemplateFileTree_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRestfulTemplateFileTree_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getRestfulTemplateFileTree_resultStandardScheme getScheme() {
        return new getRestfulTemplateFileTree_resultStandardScheme();
      }
    }

    private static class getRestfulTemplateFileTree_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRestfulTemplateFileTree_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getRestfulTemplateFileTree_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getRestfulTemplateFileTree_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRestfulTemplateFileTree_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getRestfulTemplateFileTree_resultTupleScheme getScheme() {
        return new getRestfulTemplateFileTree_resultTupleScheme();
      }
    }

    private static class getRestfulTemplateFileTree_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRestfulTemplateFileTree_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRestfulTemplateFileTree_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRestfulTemplateFileTree_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkFileTreeResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
