/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.processing.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-12-15")
public class SdkCodeTemplateDto implements org.apache.thrift.TBase<SdkCodeTemplateDto, SdkCodeTemplateDto._Fields>, java.io.Serializable, Cloneable, Comparable<SdkCodeTemplateDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SdkCodeTemplateDto");

  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSeparator", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAMESPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("namespace", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField AST_FIELD_DESC = new org.apache.thrift.protocol.TField("ast", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IMPORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("imports", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SdkCodeTemplateDtoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SdkCodeTemplateDtoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String filePath; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String fileSeparator; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> namespace; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ast; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String content; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,SdkCodeTemplateDto> imports; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_PATH((short)1, "filePath"),
    FILE_SEPARATOR((short)2, "fileSeparator"),
    NAMESPACE((short)3, "namespace"),
    AST((short)4, "ast"),
    CONTENT((short)5, "content"),
    IMPORTS((short)6, "imports");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_PATH
          return FILE_PATH;
        case 2: // FILE_SEPARATOR
          return FILE_SEPARATOR;
        case 3: // NAMESPACE
          return NAMESPACE;
        case 4: // AST
          return AST;
        case 5: // CONTENT
          return CONTENT;
        case 6: // IMPORTS
          return IMPORTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.AST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("fileSeparator", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAMESPACE, new org.apache.thrift.meta_data.FieldMetaData("namespace", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AST, new org.apache.thrift.meta_data.FieldMetaData("ast", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPORTS, new org.apache.thrift.meta_data.FieldMetaData("imports", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SdkCodeTemplateDto.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SdkCodeTemplateDto.class, metaDataMap);
  }

  public SdkCodeTemplateDto() {
  }

  public SdkCodeTemplateDto(
    java.lang.String filePath,
    java.lang.String fileSeparator,
    java.util.Map<java.lang.String,java.lang.String> namespace,
    java.lang.String content,
    java.util.Map<java.lang.String,SdkCodeTemplateDto> imports)
  {
    this();
    this.filePath = filePath;
    this.fileSeparator = fileSeparator;
    this.namespace = namespace;
    this.content = content;
    this.imports = imports;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SdkCodeTemplateDto(SdkCodeTemplateDto other) {
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    if (other.isSetFileSeparator()) {
      this.fileSeparator = other.fileSeparator;
    }
    if (other.isSetNamespace()) {
      java.util.Map<java.lang.String,java.lang.String> __this__namespace = new java.util.HashMap<java.lang.String,java.lang.String>(other.namespace);
      this.namespace = __this__namespace;
    }
    if (other.isSetAst()) {
      this.ast = other.ast;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetImports()) {
      java.util.Map<java.lang.String,SdkCodeTemplateDto> __this__imports = new java.util.HashMap<java.lang.String,SdkCodeTemplateDto>(other.imports.size());
      for (java.util.Map.Entry<java.lang.String, SdkCodeTemplateDto> other_element : other.imports.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        SdkCodeTemplateDto other_element_value = other_element.getValue();

        java.lang.String __this__imports_copy_key = other_element_key;

        SdkCodeTemplateDto __this__imports_copy_value = new SdkCodeTemplateDto(other_element_value);

        __this__imports.put(__this__imports_copy_key, __this__imports_copy_value);
      }
      this.imports = __this__imports;
    }
  }

  @Override
  public SdkCodeTemplateDto deepCopy() {
    return new SdkCodeTemplateDto(this);
  }

  @Override
  public void clear() {
    this.filePath = null;
    this.fileSeparator = null;
    this.namespace = null;
    this.ast = null;
    this.content = null;
    this.imports = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFilePath() {
    return this.filePath;
  }

  public SdkCodeTemplateDto setFilePath(@org.apache.thrift.annotation.Nullable java.lang.String filePath) {
    this.filePath = filePath;
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFileSeparator() {
    return this.fileSeparator;
  }

  public SdkCodeTemplateDto setFileSeparator(@org.apache.thrift.annotation.Nullable java.lang.String fileSeparator) {
    this.fileSeparator = fileSeparator;
    return this;
  }

  public void unsetFileSeparator() {
    this.fileSeparator = null;
  }

  /** Returns true if field fileSeparator is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSeparator() {
    return this.fileSeparator != null;
  }

  public void setFileSeparatorIsSet(boolean value) {
    if (!value) {
      this.fileSeparator = null;
    }
  }

  public int getNamespaceSize() {
    return (this.namespace == null) ? 0 : this.namespace.size();
  }

  public void putToNamespace(java.lang.String key, java.lang.String val) {
    if (this.namespace == null) {
      this.namespace = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.namespace.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getNamespace() {
    return this.namespace;
  }

  public SdkCodeTemplateDto setNamespace(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> namespace) {
    this.namespace = namespace;
    return this;
  }

  public void unsetNamespace() {
    this.namespace = null;
  }

  /** Returns true if field namespace is set (has been assigned a value) and false otherwise */
  public boolean isSetNamespace() {
    return this.namespace != null;
  }

  public void setNamespaceIsSet(boolean value) {
    if (!value) {
      this.namespace = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAst() {
    return this.ast;
  }

  public SdkCodeTemplateDto setAst(@org.apache.thrift.annotation.Nullable java.lang.String ast) {
    this.ast = ast;
    return this;
  }

  public void unsetAst() {
    this.ast = null;
  }

  /** Returns true if field ast is set (has been assigned a value) and false otherwise */
  public boolean isSetAst() {
    return this.ast != null;
  }

  public void setAstIsSet(boolean value) {
    if (!value) {
      this.ast = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getContent() {
    return this.content;
  }

  public SdkCodeTemplateDto setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getImportsSize() {
    return (this.imports == null) ? 0 : this.imports.size();
  }

  public void putToImports(java.lang.String key, SdkCodeTemplateDto val) {
    if (this.imports == null) {
      this.imports = new java.util.HashMap<java.lang.String,SdkCodeTemplateDto>();
    }
    this.imports.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,SdkCodeTemplateDto> getImports() {
    return this.imports;
  }

  public SdkCodeTemplateDto setImports(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,SdkCodeTemplateDto> imports) {
    this.imports = imports;
    return this;
  }

  public void unsetImports() {
    this.imports = null;
  }

  /** Returns true if field imports is set (has been assigned a value) and false otherwise */
  public boolean isSetImports() {
    return this.imports != null;
  }

  public void setImportsIsSet(boolean value) {
    if (!value) {
      this.imports = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((java.lang.String)value);
      }
      break;

    case FILE_SEPARATOR:
      if (value == null) {
        unsetFileSeparator();
      } else {
        setFileSeparator((java.lang.String)value);
      }
      break;

    case NAMESPACE:
      if (value == null) {
        unsetNamespace();
      } else {
        setNamespace((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case AST:
      if (value == null) {
        unsetAst();
      } else {
        setAst((java.lang.String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((java.lang.String)value);
      }
      break;

    case IMPORTS:
      if (value == null) {
        unsetImports();
      } else {
        setImports((java.util.Map<java.lang.String,SdkCodeTemplateDto>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_PATH:
      return getFilePath();

    case FILE_SEPARATOR:
      return getFileSeparator();

    case NAMESPACE:
      return getNamespace();

    case AST:
      return getAst();

    case CONTENT:
      return getContent();

    case IMPORTS:
      return getImports();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILE_PATH:
      return isSetFilePath();
    case FILE_SEPARATOR:
      return isSetFileSeparator();
    case NAMESPACE:
      return isSetNamespace();
    case AST:
      return isSetAst();
    case CONTENT:
      return isSetContent();
    case IMPORTS:
      return isSetImports();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SdkCodeTemplateDto)
      return this.equals((SdkCodeTemplateDto)that);
    return false;
  }

  public boolean equals(SdkCodeTemplateDto that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath))
        return false;
      if (!this.filePath.equals(that.filePath))
        return false;
    }

    boolean this_present_fileSeparator = true && this.isSetFileSeparator();
    boolean that_present_fileSeparator = true && that.isSetFileSeparator();
    if (this_present_fileSeparator || that_present_fileSeparator) {
      if (!(this_present_fileSeparator && that_present_fileSeparator))
        return false;
      if (!this.fileSeparator.equals(that.fileSeparator))
        return false;
    }

    boolean this_present_namespace = true && this.isSetNamespace();
    boolean that_present_namespace = true && that.isSetNamespace();
    if (this_present_namespace || that_present_namespace) {
      if (!(this_present_namespace && that_present_namespace))
        return false;
      if (!this.namespace.equals(that.namespace))
        return false;
    }

    boolean this_present_ast = true && this.isSetAst();
    boolean that_present_ast = true && that.isSetAst();
    if (this_present_ast || that_present_ast) {
      if (!(this_present_ast && that_present_ast))
        return false;
      if (!this.ast.equals(that.ast))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_imports = true && this.isSetImports();
    boolean that_present_imports = true && that.isSetImports();
    if (this_present_imports || that_present_imports) {
      if (!(this_present_imports && that_present_imports))
        return false;
      if (!this.imports.equals(that.imports))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
    if (isSetFilePath())
      hashCode = hashCode * 8191 + filePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileSeparator()) ? 131071 : 524287);
    if (isSetFileSeparator())
      hashCode = hashCode * 8191 + fileSeparator.hashCode();

    hashCode = hashCode * 8191 + ((isSetNamespace()) ? 131071 : 524287);
    if (isSetNamespace())
      hashCode = hashCode * 8191 + namespace.hashCode();

    hashCode = hashCode * 8191 + ((isSetAst()) ? 131071 : 524287);
    if (isSetAst())
      hashCode = hashCode * 8191 + ast.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetImports()) ? 131071 : 524287);
    if (isSetImports())
      hashCode = hashCode * 8191 + imports.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SdkCodeTemplateDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFilePath(), other.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileSeparator(), other.isSetFileSeparator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSeparator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSeparator, other.fileSeparator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNamespace(), other.isSetNamespace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamespace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namespace, other.namespace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAst(), other.isSetAst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ast, other.ast);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetImports(), other.isSetImports());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImports()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imports, other.imports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SdkCodeTemplateDto(");
    boolean first = true;

    sb.append("filePath:");
    if (this.filePath == null) {
      sb.append("null");
    } else {
      sb.append(this.filePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSeparator:");
    if (this.fileSeparator == null) {
      sb.append("null");
    } else {
      sb.append(this.fileSeparator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("namespace:");
    if (this.namespace == null) {
      sb.append("null");
    } else {
      sb.append(this.namespace);
    }
    first = false;
    if (isSetAst()) {
      if (!first) sb.append(", ");
      sb.append("ast:");
      if (this.ast == null) {
        sb.append("null");
      } else {
        sb.append(this.ast);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imports:");
    if (this.imports == null) {
      sb.append("null");
    } else {
      sb.append(this.imports);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (filePath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filePath' was not present! Struct: " + toString());
    }
    if (fileSeparator == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileSeparator' was not present! Struct: " + toString());
    }
    if (namespace == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'namespace' was not present! Struct: " + toString());
    }
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    if (imports == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'imports' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SdkCodeTemplateDtoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SdkCodeTemplateDtoStandardScheme getScheme() {
      return new SdkCodeTemplateDtoStandardScheme();
    }
  }

  private static class SdkCodeTemplateDtoStandardScheme extends org.apache.thrift.scheme.StandardScheme<SdkCodeTemplateDto> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SdkCodeTemplateDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePath = iprot.readString();
              struct.setFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileSeparator = iprot.readString();
              struct.setFileSeparatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAMESPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.namespace = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.namespace.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setNamespaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ast = iprot.readString();
              struct.setAstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMPORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.imports = new java.util.HashMap<java.lang.String,SdkCodeTemplateDto>(2*_map4.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key5;
                @org.apache.thrift.annotation.Nullable SdkCodeTemplateDto _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = new SdkCodeTemplateDto();
                  _val6.read(iprot);
                  struct.imports.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setImportsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SdkCodeTemplateDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.filePath != null) {
        oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.filePath);
        oprot.writeFieldEnd();
      }
      if (struct.fileSeparator != null) {
        oprot.writeFieldBegin(FILE_SEPARATOR_FIELD_DESC);
        oprot.writeString(struct.fileSeparator);
        oprot.writeFieldEnd();
      }
      if (struct.namespace != null) {
        oprot.writeFieldBegin(NAMESPACE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.namespace.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter8 : struct.namespace.entrySet())
          {
            oprot.writeString(_iter8.getKey());
            oprot.writeString(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ast != null) {
        if (struct.isSetAst()) {
          oprot.writeFieldBegin(AST_FIELD_DESC);
          oprot.writeString(struct.ast);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.imports != null) {
        oprot.writeFieldBegin(IMPORTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.imports.size()));
          for (java.util.Map.Entry<java.lang.String, SdkCodeTemplateDto> _iter9 : struct.imports.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            _iter9.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SdkCodeTemplateDtoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SdkCodeTemplateDtoTupleScheme getScheme() {
      return new SdkCodeTemplateDtoTupleScheme();
    }
  }

  private static class SdkCodeTemplateDtoTupleScheme extends org.apache.thrift.scheme.TupleScheme<SdkCodeTemplateDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SdkCodeTemplateDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.filePath);
      oprot.writeString(struct.fileSeparator);
      {
        oprot.writeI32(struct.namespace.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter10 : struct.namespace.entrySet())
        {
          oprot.writeString(_iter10.getKey());
          oprot.writeString(_iter10.getValue());
        }
      }
      oprot.writeString(struct.content);
      {
        oprot.writeI32(struct.imports.size());
        for (java.util.Map.Entry<java.lang.String, SdkCodeTemplateDto> _iter11 : struct.imports.entrySet())
        {
          oprot.writeString(_iter11.getKey());
          _iter11.getValue().write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAst()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetAst()) {
        oprot.writeString(struct.ast);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SdkCodeTemplateDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.filePath = iprot.readString();
      struct.setFilePathIsSet(true);
      struct.fileSeparator = iprot.readString();
      struct.setFileSeparatorIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
        struct.namespace = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map12.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key13;
        @org.apache.thrift.annotation.Nullable java.lang.String _val14;
        for (int _i15 = 0; _i15 < _map12.size; ++_i15)
        {
          _key13 = iprot.readString();
          _val14 = iprot.readString();
          struct.namespace.put(_key13, _val14);
        }
      }
      struct.setNamespaceIsSet(true);
      struct.content = iprot.readString();
      struct.setContentIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
        struct.imports = new java.util.HashMap<java.lang.String,SdkCodeTemplateDto>(2*_map16.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key17;
        @org.apache.thrift.annotation.Nullable SdkCodeTemplateDto _val18;
        for (int _i19 = 0; _i19 < _map16.size; ++_i19)
        {
          _key17 = iprot.readString();
          _val18 = new SdkCodeTemplateDto();
          _val18.read(iprot);
          struct.imports.put(_key17, _val18);
        }
      }
      struct.setImportsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.ast = iprot.readString();
        struct.setAstIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

