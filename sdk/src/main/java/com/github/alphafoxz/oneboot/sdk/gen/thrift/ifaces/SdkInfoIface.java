/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.alphafoxz.oneboot.sdk.gen.thrift.ifaces;

@javax.annotation.processing.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-11-14")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SdkInfoIface {

  public interface Iface {

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto checkThriftErr() throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto checkRestApiImplements() throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto checkRpcImplements() throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getJavaNamespace() throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto deleteFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath) throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto createOrUpdateFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String fileContent) throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto createFolder(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto folderPath) throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto renameFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String newPath) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void checkThriftErr(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void checkRestApiImplements(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void checkRpcImplements(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void getJavaNamespace(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void deleteFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void createOrUpdateFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String fileContent, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void createFolder(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto folderPath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void renameFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String newPath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto checkThriftErr() throws org.apache.thrift.TException
    {
      send_checkThriftErr();
      return recv_checkThriftErr();
    }

    public void send_checkThriftErr() throws org.apache.thrift.TException
    {
      checkThriftErr_args args = new checkThriftErr_args();
      sendBase("checkThriftErr", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto recv_checkThriftErr() throws org.apache.thrift.TException
    {
      checkThriftErr_result result = new checkThriftErr_result();
      receiveBase(result, "checkThriftErr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkThriftErr failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto checkRestApiImplements() throws org.apache.thrift.TException
    {
      send_checkRestApiImplements();
      return recv_checkRestApiImplements();
    }

    public void send_checkRestApiImplements() throws org.apache.thrift.TException
    {
      checkRestApiImplements_args args = new checkRestApiImplements_args();
      sendBase("checkRestApiImplements", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto recv_checkRestApiImplements() throws org.apache.thrift.TException
    {
      checkRestApiImplements_result result = new checkRestApiImplements_result();
      receiveBase(result, "checkRestApiImplements");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkRestApiImplements failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto checkRpcImplements() throws org.apache.thrift.TException
    {
      send_checkRpcImplements();
      return recv_checkRpcImplements();
    }

    public void send_checkRpcImplements() throws org.apache.thrift.TException
    {
      checkRpcImplements_args args = new checkRpcImplements_args();
      sendBase("checkRpcImplements", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto recv_checkRpcImplements() throws org.apache.thrift.TException
    {
      checkRpcImplements_result result = new checkRpcImplements_result();
      receiveBase(result, "checkRpcImplements");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkRpcImplements failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getJavaNamespace() throws org.apache.thrift.TException
    {
      send_getJavaNamespace();
      return recv_getJavaNamespace();
    }

    public void send_getJavaNamespace() throws org.apache.thrift.TException
    {
      getJavaNamespace_args args = new getJavaNamespace_args();
      sendBase("getJavaNamespace", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto recv_getJavaNamespace() throws org.apache.thrift.TException
    {
      getJavaNamespace_result result = new getJavaNamespace_result();
      receiveBase(result, "getJavaNamespace");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJavaNamespace failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto deleteFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath) throws org.apache.thrift.TException
    {
      send_deleteFile(filePath);
      return recv_deleteFile();
    }

    public void send_deleteFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath) throws org.apache.thrift.TException
    {
      deleteFile_args args = new deleteFile_args();
      args.setFilePath(filePath);
      sendBase("deleteFile", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto recv_deleteFile() throws org.apache.thrift.TException
    {
      deleteFile_result result = new deleteFile_result();
      receiveBase(result, "deleteFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFile failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto createOrUpdateFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String fileContent) throws org.apache.thrift.TException
    {
      send_createOrUpdateFile(filePath, fileContent);
      return recv_createOrUpdateFile();
    }

    public void send_createOrUpdateFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String fileContent) throws org.apache.thrift.TException
    {
      createOrUpdateFile_args args = new createOrUpdateFile_args();
      args.setFilePath(filePath);
      args.setFileContent(fileContent);
      sendBase("createOrUpdateFile", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto recv_createOrUpdateFile() throws org.apache.thrift.TException
    {
      createOrUpdateFile_result result = new createOrUpdateFile_result();
      receiveBase(result, "createOrUpdateFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createOrUpdateFile failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto createFolder(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto folderPath) throws org.apache.thrift.TException
    {
      send_createFolder(folderPath);
      return recv_createFolder();
    }

    public void send_createFolder(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto folderPath) throws org.apache.thrift.TException
    {
      createFolder_args args = new createFolder_args();
      args.setFolderPath(folderPath);
      sendBase("createFolder", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto recv_createFolder() throws org.apache.thrift.TException
    {
      createFolder_result result = new createFolder_result();
      receiveBase(result, "createFolder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createFolder failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto renameFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String newPath) throws org.apache.thrift.TException
    {
      send_renameFile(filePath, newPath);
      return recv_renameFile();
    }

    public void send_renameFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String newPath) throws org.apache.thrift.TException
    {
      renameFile_args args = new renameFile_args();
      args.setFilePath(filePath);
      args.setNewPath(newPath);
      sendBase("renameFile", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto recv_renameFile() throws org.apache.thrift.TException
    {
      renameFile_result result = new renameFile_result();
      receiveBase(result, "renameFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "renameFile failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void checkThriftErr(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkThriftErr_call method_call = new checkThriftErr_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkThriftErr_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      public checkThriftErr_call(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkThriftErr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkThriftErr_args args = new checkThriftErr_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkThriftErr();
      }
    }

    @Override
    public void checkRestApiImplements(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkRestApiImplements_call method_call = new checkRestApiImplements_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkRestApiImplements_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      public checkRestApiImplements_call(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkRestApiImplements", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkRestApiImplements_args args = new checkRestApiImplements_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkRestApiImplements();
      }
    }

    @Override
    public void checkRpcImplements(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkRpcImplements_call method_call = new checkRpcImplements_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkRpcImplements_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      public checkRpcImplements_call(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkRpcImplements", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkRpcImplements_args args = new checkRpcImplements_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkRpcImplements();
      }
    }

    @Override
    public void getJavaNamespace(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJavaNamespace_call method_call = new getJavaNamespace_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJavaNamespace_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      public getJavaNamespace_call(org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJavaNamespace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJavaNamespace_args args = new getJavaNamespace_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJavaNamespace();
      }
    }

    @Override
    public void deleteFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFile_call method_call = new deleteFile_call(filePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFile_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      private com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath;
      public deleteFile_call(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filePath = filePath;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFile_args args = new deleteFile_args();
        args.setFilePath(filePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteFile();
      }
    }

    @Override
    public void createOrUpdateFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String fileContent, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOrUpdateFile_call method_call = new createOrUpdateFile_call(filePath, fileContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOrUpdateFile_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      private com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath;
      private java.lang.String fileContent;
      public createOrUpdateFile_call(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String fileContent, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filePath = filePath;
        this.fileContent = fileContent;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOrUpdateFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOrUpdateFile_args args = new createOrUpdateFile_args();
        args.setFilePath(filePath);
        args.setFileContent(fileContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createOrUpdateFile();
      }
    }

    @Override
    public void createFolder(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto folderPath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createFolder_call method_call = new createFolder_call(folderPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createFolder_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      private com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto folderPath;
      public createFolder_call(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto folderPath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.folderPath = folderPath;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createFolder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createFolder_args args = new createFolder_args();
        args.setFolderPath(folderPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createFolder();
      }
    }

    @Override
    public void renameFile(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String newPath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      renameFile_call method_call = new renameFile_call(filePath, newPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class renameFile_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      private com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath;
      private java.lang.String newPath;
      public renameFile_call(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath, java.lang.String newPath, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filePath = filePath;
        this.newPath = newPath;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("renameFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        renameFile_args args = new renameFile_args();
        args.setFilePath(filePath);
        args.setNewPath(newPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_renameFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("checkThriftErr", new checkThriftErr());
      processMap.put("checkRestApiImplements", new checkRestApiImplements());
      processMap.put("checkRpcImplements", new checkRpcImplements());
      processMap.put("getJavaNamespace", new getJavaNamespace());
      processMap.put("deleteFile", new deleteFile());
      processMap.put("createOrUpdateFile", new createOrUpdateFile());
      processMap.put("createFolder", new createFolder());
      processMap.put("renameFile", new renameFile());
      return processMap;
    }

    public static class checkThriftErr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkThriftErr_args> {
      public checkThriftErr() {
        super("checkThriftErr");
      }

      @Override
      public checkThriftErr_args getEmptyArgsInstance() {
        return new checkThriftErr_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public checkThriftErr_result getResult(I iface, checkThriftErr_args args) throws org.apache.thrift.TException {
        checkThriftErr_result result = new checkThriftErr_result();
        result.success = iface.checkThriftErr();
        return result;
      }
    }

    public static class checkRestApiImplements<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkRestApiImplements_args> {
      public checkRestApiImplements() {
        super("checkRestApiImplements");
      }

      @Override
      public checkRestApiImplements_args getEmptyArgsInstance() {
        return new checkRestApiImplements_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public checkRestApiImplements_result getResult(I iface, checkRestApiImplements_args args) throws org.apache.thrift.TException {
        checkRestApiImplements_result result = new checkRestApiImplements_result();
        result.success = iface.checkRestApiImplements();
        return result;
      }
    }

    public static class checkRpcImplements<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkRpcImplements_args> {
      public checkRpcImplements() {
        super("checkRpcImplements");
      }

      @Override
      public checkRpcImplements_args getEmptyArgsInstance() {
        return new checkRpcImplements_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public checkRpcImplements_result getResult(I iface, checkRpcImplements_args args) throws org.apache.thrift.TException {
        checkRpcImplements_result result = new checkRpcImplements_result();
        result.success = iface.checkRpcImplements();
        return result;
      }
    }

    public static class getJavaNamespace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJavaNamespace_args> {
      public getJavaNamespace() {
        super("getJavaNamespace");
      }

      @Override
      public getJavaNamespace_args getEmptyArgsInstance() {
        return new getJavaNamespace_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getJavaNamespace_result getResult(I iface, getJavaNamespace_args args) throws org.apache.thrift.TException {
        getJavaNamespace_result result = new getJavaNamespace_result();
        result.success = iface.getJavaNamespace();
        return result;
      }
    }

    public static class deleteFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFile_args> {
      public deleteFile() {
        super("deleteFile");
      }

      @Override
      public deleteFile_args getEmptyArgsInstance() {
        return new deleteFile_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public deleteFile_result getResult(I iface, deleteFile_args args) throws org.apache.thrift.TException {
        deleteFile_result result = new deleteFile_result();
        result.success = iface.deleteFile(args.filePath);
        return result;
      }
    }

    public static class createOrUpdateFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOrUpdateFile_args> {
      public createOrUpdateFile() {
        super("createOrUpdateFile");
      }

      @Override
      public createOrUpdateFile_args getEmptyArgsInstance() {
        return new createOrUpdateFile_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public createOrUpdateFile_result getResult(I iface, createOrUpdateFile_args args) throws org.apache.thrift.TException {
        createOrUpdateFile_result result = new createOrUpdateFile_result();
        result.success = iface.createOrUpdateFile(args.filePath, args.fileContent);
        return result;
      }
    }

    public static class createFolder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createFolder_args> {
      public createFolder() {
        super("createFolder");
      }

      @Override
      public createFolder_args getEmptyArgsInstance() {
        return new createFolder_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public createFolder_result getResult(I iface, createFolder_args args) throws org.apache.thrift.TException {
        createFolder_result result = new createFolder_result();
        result.success = iface.createFolder(args.folderPath);
        return result;
      }
    }

    public static class renameFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, renameFile_args> {
      public renameFile() {
        super("renameFile");
      }

      @Override
      public renameFile_args getEmptyArgsInstance() {
        return new renameFile_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public renameFile_result getResult(I iface, renameFile_args args) throws org.apache.thrift.TException {
        renameFile_result result = new renameFile_result();
        result.success = iface.renameFile(args.filePath, args.newPath);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("checkThriftErr", new checkThriftErr());
      processMap.put("checkRestApiImplements", new checkRestApiImplements());
      processMap.put("checkRpcImplements", new checkRpcImplements());
      processMap.put("getJavaNamespace", new getJavaNamespace());
      processMap.put("deleteFile", new deleteFile());
      processMap.put("createOrUpdateFile", new createOrUpdateFile());
      processMap.put("createFolder", new createFolder());
      processMap.put("renameFile", new renameFile());
      return processMap;
    }

    public static class checkThriftErr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkThriftErr_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      public checkThriftErr() {
        super("checkThriftErr");
      }

      @Override
      public checkThriftErr_args getEmptyArgsInstance() {
        return new checkThriftErr_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto o) {
            checkThriftErr_result result = new checkThriftErr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkThriftErr_result result = new checkThriftErr_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, checkThriftErr_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.checkThriftErr(resultHandler);
      }
    }

    public static class checkRestApiImplements<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkRestApiImplements_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      public checkRestApiImplements() {
        super("checkRestApiImplements");
      }

      @Override
      public checkRestApiImplements_args getEmptyArgsInstance() {
        return new checkRestApiImplements_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto o) {
            checkRestApiImplements_result result = new checkRestApiImplements_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkRestApiImplements_result result = new checkRestApiImplements_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, checkRestApiImplements_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.checkRestApiImplements(resultHandler);
      }
    }

    public static class checkRpcImplements<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkRpcImplements_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      public checkRpcImplements() {
        super("checkRpcImplements");
      }

      @Override
      public checkRpcImplements_args getEmptyArgsInstance() {
        return new checkRpcImplements_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto o) {
            checkRpcImplements_result result = new checkRpcImplements_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkRpcImplements_result result = new checkRpcImplements_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, checkRpcImplements_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.checkRpcImplements(resultHandler);
      }
    }

    public static class getJavaNamespace<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getJavaNamespace_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      public getJavaNamespace() {
        super("getJavaNamespace");
      }

      @Override
      public getJavaNamespace_args getEmptyArgsInstance() {
        return new getJavaNamespace_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto o) {
            getJavaNamespace_result result = new getJavaNamespace_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getJavaNamespace_result result = new getJavaNamespace_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getJavaNamespace_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.getJavaNamespace(resultHandler);
      }
    }

    public static class deleteFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFile_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      public deleteFile() {
        super("deleteFile");
      }

      @Override
      public deleteFile_args getEmptyArgsInstance() {
        return new deleteFile_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto o) {
            deleteFile_result result = new deleteFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteFile_result result = new deleteFile_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, deleteFile_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.deleteFile(args.filePath,resultHandler);
      }
    }

    public static class createOrUpdateFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOrUpdateFile_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      public createOrUpdateFile() {
        super("createOrUpdateFile");
      }

      @Override
      public createOrUpdateFile_args getEmptyArgsInstance() {
        return new createOrUpdateFile_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto o) {
            createOrUpdateFile_result result = new createOrUpdateFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createOrUpdateFile_result result = new createOrUpdateFile_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, createOrUpdateFile_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.createOrUpdateFile(args.filePath, args.fileContent,resultHandler);
      }
    }

    public static class createFolder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createFolder_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      public createFolder() {
        super("createFolder");
      }

      @Override
      public createFolder_args getEmptyArgsInstance() {
        return new createFolder_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto o) {
            createFolder_result result = new createFolder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createFolder_result result = new createFolder_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, createFolder_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.createFolder(args.folderPath,resultHandler);
      }
    }

    public static class renameFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, renameFile_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      public renameFile() {
        super("renameFile");
      }

      @Override
      public renameFile_args getEmptyArgsInstance() {
        return new renameFile_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto o) {
            renameFile_result result = new renameFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            renameFile_result result = new renameFile_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, renameFile_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.renameFile(args.filePath, args.newPath,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class checkThriftErr_args implements org.apache.thrift.TBase<checkThriftErr_args, checkThriftErr_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkThriftErr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkThriftErr_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkThriftErr_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkThriftErr_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkThriftErr_args.class, metaDataMap);
    }

    public checkThriftErr_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkThriftErr_args(checkThriftErr_args other) {
    }

    @Override
    public checkThriftErr_args deepCopy() {
      return new checkThriftErr_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof checkThriftErr_args)
        return this.equals((checkThriftErr_args)that);
      return false;
    }

    public boolean equals(checkThriftErr_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(checkThriftErr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkThriftErr_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkThriftErr_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkThriftErr_argsStandardScheme getScheme() {
        return new checkThriftErr_argsStandardScheme();
      }
    }

    private static class checkThriftErr_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkThriftErr_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, checkThriftErr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, checkThriftErr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkThriftErr_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkThriftErr_argsTupleScheme getScheme() {
        return new checkThriftErr_argsTupleScheme();
      }
    }

    private static class checkThriftErr_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkThriftErr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkThriftErr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkThriftErr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class checkThriftErr_result implements org.apache.thrift.TBase<checkThriftErr_result, checkThriftErr_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkThriftErr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkThriftErr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkThriftErr_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkThriftErr_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkThriftErr_result.class, metaDataMap);
    }

    public checkThriftErr_result() {
    }

    public checkThriftErr_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkThriftErr_result(checkThriftErr_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto(other.success);
      }
    }

    @Override
    public checkThriftErr_result deepCopy() {
      return new checkThriftErr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getSuccess() {
      return this.success;
    }

    public checkThriftErr_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof checkThriftErr_result)
        return this.equals((checkThriftErr_result)that);
      return false;
    }

    public boolean equals(checkThriftErr_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkThriftErr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkThriftErr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkThriftErr_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkThriftErr_resultStandardScheme getScheme() {
        return new checkThriftErr_resultStandardScheme();
      }
    }

    private static class checkThriftErr_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkThriftErr_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, checkThriftErr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, checkThriftErr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkThriftErr_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkThriftErr_resultTupleScheme getScheme() {
        return new checkThriftErr_resultTupleScheme();
      }
    }

    private static class checkThriftErr_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkThriftErr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkThriftErr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkThriftErr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class checkRestApiImplements_args implements org.apache.thrift.TBase<checkRestApiImplements_args, checkRestApiImplements_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkRestApiImplements_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkRestApiImplements_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkRestApiImplements_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkRestApiImplements_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkRestApiImplements_args.class, metaDataMap);
    }

    public checkRestApiImplements_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkRestApiImplements_args(checkRestApiImplements_args other) {
    }

    @Override
    public checkRestApiImplements_args deepCopy() {
      return new checkRestApiImplements_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof checkRestApiImplements_args)
        return this.equals((checkRestApiImplements_args)that);
      return false;
    }

    public boolean equals(checkRestApiImplements_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(checkRestApiImplements_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkRestApiImplements_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkRestApiImplements_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkRestApiImplements_argsStandardScheme getScheme() {
        return new checkRestApiImplements_argsStandardScheme();
      }
    }

    private static class checkRestApiImplements_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkRestApiImplements_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, checkRestApiImplements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, checkRestApiImplements_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkRestApiImplements_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkRestApiImplements_argsTupleScheme getScheme() {
        return new checkRestApiImplements_argsTupleScheme();
      }
    }

    private static class checkRestApiImplements_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkRestApiImplements_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkRestApiImplements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkRestApiImplements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class checkRestApiImplements_result implements org.apache.thrift.TBase<checkRestApiImplements_result, checkRestApiImplements_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkRestApiImplements_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkRestApiImplements_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkRestApiImplements_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkRestApiImplements_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkRestApiImplements_result.class, metaDataMap);
    }

    public checkRestApiImplements_result() {
    }

    public checkRestApiImplements_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkRestApiImplements_result(checkRestApiImplements_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto(other.success);
      }
    }

    @Override
    public checkRestApiImplements_result deepCopy() {
      return new checkRestApiImplements_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getSuccess() {
      return this.success;
    }

    public checkRestApiImplements_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof checkRestApiImplements_result)
        return this.equals((checkRestApiImplements_result)that);
      return false;
    }

    public boolean equals(checkRestApiImplements_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkRestApiImplements_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkRestApiImplements_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkRestApiImplements_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkRestApiImplements_resultStandardScheme getScheme() {
        return new checkRestApiImplements_resultStandardScheme();
      }
    }

    private static class checkRestApiImplements_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkRestApiImplements_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, checkRestApiImplements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, checkRestApiImplements_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkRestApiImplements_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkRestApiImplements_resultTupleScheme getScheme() {
        return new checkRestApiImplements_resultTupleScheme();
      }
    }

    private static class checkRestApiImplements_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkRestApiImplements_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkRestApiImplements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkRestApiImplements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class checkRpcImplements_args implements org.apache.thrift.TBase<checkRpcImplements_args, checkRpcImplements_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkRpcImplements_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkRpcImplements_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkRpcImplements_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkRpcImplements_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkRpcImplements_args.class, metaDataMap);
    }

    public checkRpcImplements_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkRpcImplements_args(checkRpcImplements_args other) {
    }

    @Override
    public checkRpcImplements_args deepCopy() {
      return new checkRpcImplements_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof checkRpcImplements_args)
        return this.equals((checkRpcImplements_args)that);
      return false;
    }

    public boolean equals(checkRpcImplements_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(checkRpcImplements_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkRpcImplements_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkRpcImplements_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkRpcImplements_argsStandardScheme getScheme() {
        return new checkRpcImplements_argsStandardScheme();
      }
    }

    private static class checkRpcImplements_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkRpcImplements_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, checkRpcImplements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, checkRpcImplements_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkRpcImplements_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkRpcImplements_argsTupleScheme getScheme() {
        return new checkRpcImplements_argsTupleScheme();
      }
    }

    private static class checkRpcImplements_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkRpcImplements_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkRpcImplements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkRpcImplements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class checkRpcImplements_result implements org.apache.thrift.TBase<checkRpcImplements_result, checkRpcImplements_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkRpcImplements_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkRpcImplements_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkRpcImplements_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkRpcImplements_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkRpcImplements_result.class, metaDataMap);
    }

    public checkRpcImplements_result() {
    }

    public checkRpcImplements_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkRpcImplements_result(checkRpcImplements_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto(other.success);
      }
    }

    @Override
    public checkRpcImplements_result deepCopy() {
      return new checkRpcImplements_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getSuccess() {
      return this.success;
    }

    public checkRpcImplements_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof checkRpcImplements_result)
        return this.equals((checkRpcImplements_result)that);
      return false;
    }

    public boolean equals(checkRpcImplements_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkRpcImplements_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkRpcImplements_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkRpcImplements_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkRpcImplements_resultStandardScheme getScheme() {
        return new checkRpcImplements_resultStandardScheme();
      }
    }

    private static class checkRpcImplements_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkRpcImplements_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, checkRpcImplements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, checkRpcImplements_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkRpcImplements_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkRpcImplements_resultTupleScheme getScheme() {
        return new checkRpcImplements_resultTupleScheme();
      }
    }

    private static class checkRpcImplements_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkRpcImplements_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkRpcImplements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkRpcImplements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getJavaNamespace_args implements org.apache.thrift.TBase<getJavaNamespace_args, getJavaNamespace_args._Fields>, java.io.Serializable, Cloneable, Comparable<getJavaNamespace_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJavaNamespace_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getJavaNamespace_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getJavaNamespace_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJavaNamespace_args.class, metaDataMap);
    }

    public getJavaNamespace_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJavaNamespace_args(getJavaNamespace_args other) {
    }

    @Override
    public getJavaNamespace_args deepCopy() {
      return new getJavaNamespace_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getJavaNamespace_args)
        return this.equals((getJavaNamespace_args)that);
      return false;
    }

    public boolean equals(getJavaNamespace_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getJavaNamespace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getJavaNamespace_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJavaNamespace_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getJavaNamespace_argsStandardScheme getScheme() {
        return new getJavaNamespace_argsStandardScheme();
      }
    }

    private static class getJavaNamespace_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getJavaNamespace_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getJavaNamespace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getJavaNamespace_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJavaNamespace_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getJavaNamespace_argsTupleScheme getScheme() {
        return new getJavaNamespace_argsTupleScheme();
      }
    }

    private static class getJavaNamespace_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getJavaNamespace_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJavaNamespace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJavaNamespace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getJavaNamespace_result implements org.apache.thrift.TBase<getJavaNamespace_result, getJavaNamespace_result._Fields>, java.io.Serializable, Cloneable, Comparable<getJavaNamespace_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJavaNamespace_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getJavaNamespace_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getJavaNamespace_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJavaNamespace_result.class, metaDataMap);
    }

    public getJavaNamespace_result() {
    }

    public getJavaNamespace_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJavaNamespace_result(getJavaNamespace_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto(other.success);
      }
    }

    @Override
    public getJavaNamespace_result deepCopy() {
      return new getJavaNamespace_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getSuccess() {
      return this.success;
    }

    public getJavaNamespace_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getJavaNamespace_result)
        return this.equals((getJavaNamespace_result)that);
      return false;
    }

    public boolean equals(getJavaNamespace_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getJavaNamespace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getJavaNamespace_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJavaNamespace_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getJavaNamespace_resultStandardScheme getScheme() {
        return new getJavaNamespace_resultStandardScheme();
      }
    }

    private static class getJavaNamespace_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getJavaNamespace_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getJavaNamespace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getJavaNamespace_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJavaNamespace_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getJavaNamespace_resultTupleScheme getScheme() {
        return new getJavaNamespace_resultTupleScheme();
      }
    }

    private static class getJavaNamespace_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getJavaNamespace_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJavaNamespace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJavaNamespace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class deleteFile_args implements org.apache.thrift.TBase<deleteFile_args, deleteFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFile_args");

    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteFile_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_PATH((short)1, "filePath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_PATH
            return FILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFile_args.class, metaDataMap);
    }

    public deleteFile_args() {
    }

    public deleteFile_args(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath)
    {
      this();
      this.filePath = filePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFile_args(deleteFile_args other) {
      if (other.isSetFilePath()) {
        this.filePath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto(other.filePath);
      }
    }

    @Override
    public deleteFile_args deepCopy() {
      return new deleteFile_args(this);
    }

    @Override
    public void clear() {
      this.filePath = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto getFilePath() {
      return this.filePath;
    }

    public deleteFile_args setFilePath(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_PATH:
        return getFilePath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_PATH:
        return isSetFilePath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof deleteFile_args)
        return this.equals((deleteFile_args)that);
      return false;
    }

    public boolean equals(deleteFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
      if (isSetFilePath())
        hashCode = hashCode * 8191 + filePath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFilePath(), other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteFile_args(");
      boolean first = true;

      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (filePath == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filePath' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (filePath != null) {
        filePath.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteFile_argsStandardScheme getScheme() {
        return new deleteFile_argsStandardScheme();
      }
    }

    private static class deleteFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteFile_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filePath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
                struct.filePath.read(iprot);
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          struct.filePath.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteFile_argsTupleScheme getScheme() {
        return new deleteFile_argsTupleScheme();
      }
    }

    private static class deleteFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.filePath.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.filePath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
        struct.filePath.read(iprot);
        struct.setFilePathIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class deleteFile_result implements org.apache.thrift.TBase<deleteFile_result, deleteFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteFile_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFile_result.class, metaDataMap);
    }

    public deleteFile_result() {
    }

    public deleteFile_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFile_result(deleteFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto(other.success);
      }
    }

    @Override
    public deleteFile_result deepCopy() {
      return new deleteFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getSuccess() {
      return this.success;
    }

    public deleteFile_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof deleteFile_result)
        return this.equals((deleteFile_result)that);
      return false;
    }

    public boolean equals(deleteFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteFile_resultStandardScheme getScheme() {
        return new deleteFile_resultStandardScheme();
      }
    }

    private static class deleteFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteFile_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteFile_resultTupleScheme getScheme() {
        return new deleteFile_resultTupleScheme();
      }
    }

    private static class deleteFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class createOrUpdateFile_args implements org.apache.thrift.TBase<createOrUpdateFile_args, createOrUpdateFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOrUpdateFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrUpdateFile_args");

    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fileContent", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOrUpdateFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOrUpdateFile_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String fileContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_PATH((short)1, "filePath"),
      FILE_CONTENT((short)2, "fileContent");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_PATH
            return FILE_PATH;
          case 2: // FILE_CONTENT
            return FILE_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto.class)));
      tmpMap.put(_Fields.FILE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("fileContent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrUpdateFile_args.class, metaDataMap);
    }

    public createOrUpdateFile_args() {
    }

    public createOrUpdateFile_args(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath,
      java.lang.String fileContent)
    {
      this();
      this.filePath = filePath;
      this.fileContent = fileContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrUpdateFile_args(createOrUpdateFile_args other) {
      if (other.isSetFilePath()) {
        this.filePath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto(other.filePath);
      }
      if (other.isSetFileContent()) {
        this.fileContent = other.fileContent;
      }
    }

    @Override
    public createOrUpdateFile_args deepCopy() {
      return new createOrUpdateFile_args(this);
    }

    @Override
    public void clear() {
      this.filePath = null;
      this.fileContent = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto getFilePath() {
      return this.filePath;
    }

    public createOrUpdateFile_args setFilePath(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFileContent() {
      return this.fileContent;
    }

    public createOrUpdateFile_args setFileContent(@org.apache.thrift.annotation.Nullable java.lang.String fileContent) {
      this.fileContent = fileContent;
      return this;
    }

    public void unsetFileContent() {
      this.fileContent = null;
    }

    /** Returns true if field fileContent is set (has been assigned a value) and false otherwise */
    public boolean isSetFileContent() {
      return this.fileContent != null;
    }

    public void setFileContentIsSet(boolean value) {
      if (!value) {
        this.fileContent = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto)value);
        }
        break;

      case FILE_CONTENT:
        if (value == null) {
          unsetFileContent();
        } else {
          setFileContent((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_PATH:
        return getFilePath();

      case FILE_CONTENT:
        return getFileContent();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_PATH:
        return isSetFilePath();
      case FILE_CONTENT:
        return isSetFileContent();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createOrUpdateFile_args)
        return this.equals((createOrUpdateFile_args)that);
      return false;
    }

    public boolean equals(createOrUpdateFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      boolean this_present_fileContent = true && this.isSetFileContent();
      boolean that_present_fileContent = true && that.isSetFileContent();
      if (this_present_fileContent || that_present_fileContent) {
        if (!(this_present_fileContent && that_present_fileContent))
          return false;
        if (!this.fileContent.equals(that.fileContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
      if (isSetFilePath())
        hashCode = hashCode * 8191 + filePath.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileContent()) ? 131071 : 524287);
      if (isSetFileContent())
        hashCode = hashCode * 8191 + fileContent.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOrUpdateFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFilePath(), other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFileContent(), other.isSetFileContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileContent, other.fileContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOrUpdateFile_args(");
      boolean first = true;

      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileContent:");
      if (this.fileContent == null) {
        sb.append("null");
      } else {
        sb.append(this.fileContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (filePath == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filePath' was not present! Struct: " + toString());
      }
      if (fileContent == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileContent' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (filePath != null) {
        filePath.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrUpdateFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createOrUpdateFile_argsStandardScheme getScheme() {
        return new createOrUpdateFile_argsStandardScheme();
      }
    }

    private static class createOrUpdateFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOrUpdateFile_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrUpdateFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filePath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
                struct.filePath.read(iprot);
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileContent = iprot.readString();
                struct.setFileContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrUpdateFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          struct.filePath.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileContent != null) {
          oprot.writeFieldBegin(FILE_CONTENT_FIELD_DESC);
          oprot.writeString(struct.fileContent);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrUpdateFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createOrUpdateFile_argsTupleScheme getScheme() {
        return new createOrUpdateFile_argsTupleScheme();
      }
    }

    private static class createOrUpdateFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOrUpdateFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrUpdateFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.filePath.write(oprot);
        oprot.writeString(struct.fileContent);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrUpdateFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.filePath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
        struct.filePath.read(iprot);
        struct.setFilePathIsSet(true);
        struct.fileContent = iprot.readString();
        struct.setFileContentIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class createOrUpdateFile_result implements org.apache.thrift.TBase<createOrUpdateFile_result, createOrUpdateFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOrUpdateFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrUpdateFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOrUpdateFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOrUpdateFile_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrUpdateFile_result.class, metaDataMap);
    }

    public createOrUpdateFile_result() {
    }

    public createOrUpdateFile_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrUpdateFile_result(createOrUpdateFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto(other.success);
      }
    }

    @Override
    public createOrUpdateFile_result deepCopy() {
      return new createOrUpdateFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getSuccess() {
      return this.success;
    }

    public createOrUpdateFile_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createOrUpdateFile_result)
        return this.equals((createOrUpdateFile_result)that);
      return false;
    }

    public boolean equals(createOrUpdateFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOrUpdateFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOrUpdateFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrUpdateFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createOrUpdateFile_resultStandardScheme getScheme() {
        return new createOrUpdateFile_resultStandardScheme();
      }
    }

    private static class createOrUpdateFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOrUpdateFile_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrUpdateFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrUpdateFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrUpdateFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createOrUpdateFile_resultTupleScheme getScheme() {
        return new createOrUpdateFile_resultTupleScheme();
      }
    }

    private static class createOrUpdateFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOrUpdateFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrUpdateFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrUpdateFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class createFolder_args implements org.apache.thrift.TBase<createFolder_args, createFolder_args._Fields>, java.io.Serializable, Cloneable, Comparable<createFolder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createFolder_args");

    private static final org.apache.thrift.protocol.TField FOLDER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("folderPath", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createFolder_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createFolder_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto folderPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOLDER_PATH((short)1, "folderPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOLDER_PATH
            return FOLDER_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOLDER_PATH, new org.apache.thrift.meta_data.FieldMetaData("folderPath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createFolder_args.class, metaDataMap);
    }

    public createFolder_args() {
    }

    public createFolder_args(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto folderPath)
    {
      this();
      this.folderPath = folderPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createFolder_args(createFolder_args other) {
      if (other.isSetFolderPath()) {
        this.folderPath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto(other.folderPath);
      }
    }

    @Override
    public createFolder_args deepCopy() {
      return new createFolder_args(this);
    }

    @Override
    public void clear() {
      this.folderPath = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto getFolderPath() {
      return this.folderPath;
    }

    public createFolder_args setFolderPath(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto folderPath) {
      this.folderPath = folderPath;
      return this;
    }

    public void unsetFolderPath() {
      this.folderPath = null;
    }

    /** Returns true if field folderPath is set (has been assigned a value) and false otherwise */
    public boolean isSetFolderPath() {
      return this.folderPath != null;
    }

    public void setFolderPathIsSet(boolean value) {
      if (!value) {
        this.folderPath = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FOLDER_PATH:
        if (value == null) {
          unsetFolderPath();
        } else {
          setFolderPath((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FOLDER_PATH:
        return getFolderPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FOLDER_PATH:
        return isSetFolderPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createFolder_args)
        return this.equals((createFolder_args)that);
      return false;
    }

    public boolean equals(createFolder_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_folderPath = true && this.isSetFolderPath();
      boolean that_present_folderPath = true && that.isSetFolderPath();
      if (this_present_folderPath || that_present_folderPath) {
        if (!(this_present_folderPath && that_present_folderPath))
          return false;
        if (!this.folderPath.equals(that.folderPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFolderPath()) ? 131071 : 524287);
      if (isSetFolderPath())
        hashCode = hashCode * 8191 + folderPath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createFolder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFolderPath(), other.isSetFolderPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFolderPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.folderPath, other.folderPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createFolder_args(");
      boolean first = true;

      sb.append("folderPath:");
      if (this.folderPath == null) {
        sb.append("null");
      } else {
        sb.append(this.folderPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (folderPath == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'folderPath' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (folderPath != null) {
        folderPath.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createFolder_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createFolder_argsStandardScheme getScheme() {
        return new createFolder_argsStandardScheme();
      }
    }

    private static class createFolder_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createFolder_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, createFolder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOLDER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.folderPath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
                struct.folderPath.read(iprot);
                struct.setFolderPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, createFolder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.folderPath != null) {
          oprot.writeFieldBegin(FOLDER_PATH_FIELD_DESC);
          struct.folderPath.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createFolder_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createFolder_argsTupleScheme getScheme() {
        return new createFolder_argsTupleScheme();
      }
    }

    private static class createFolder_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createFolder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createFolder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.folderPath.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createFolder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.folderPath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
        struct.folderPath.read(iprot);
        struct.setFolderPathIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class createFolder_result implements org.apache.thrift.TBase<createFolder_result, createFolder_result._Fields>, java.io.Serializable, Cloneable, Comparable<createFolder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createFolder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createFolder_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createFolder_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createFolder_result.class, metaDataMap);
    }

    public createFolder_result() {
    }

    public createFolder_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createFolder_result(createFolder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto(other.success);
      }
    }

    @Override
    public createFolder_result deepCopy() {
      return new createFolder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getSuccess() {
      return this.success;
    }

    public createFolder_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createFolder_result)
        return this.equals((createFolder_result)that);
      return false;
    }

    public boolean equals(createFolder_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createFolder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createFolder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createFolder_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createFolder_resultStandardScheme getScheme() {
        return new createFolder_resultStandardScheme();
      }
    }

    private static class createFolder_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createFolder_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, createFolder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, createFolder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createFolder_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createFolder_resultTupleScheme getScheme() {
        return new createFolder_resultTupleScheme();
      }
    }

    private static class createFolder_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createFolder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createFolder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createFolder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class renameFile_args implements org.apache.thrift.TBase<renameFile_args, renameFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<renameFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameFile_args");

    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("newPath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renameFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renameFile_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String newPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_PATH((short)1, "filePath"),
      NEW_PATH((short)2, "newPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_PATH
            return FILE_PATH;
          case 2: // NEW_PATH
            return NEW_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto.class)));
      tmpMap.put(_Fields.NEW_PATH, new org.apache.thrift.meta_data.FieldMetaData("newPath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameFile_args.class, metaDataMap);
    }

    public renameFile_args() {
    }

    public renameFile_args(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath,
      java.lang.String newPath)
    {
      this();
      this.filePath = filePath;
      this.newPath = newPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameFile_args(renameFile_args other) {
      if (other.isSetFilePath()) {
        this.filePath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto(other.filePath);
      }
      if (other.isSetNewPath()) {
        this.newPath = other.newPath;
      }
    }

    @Override
    public renameFile_args deepCopy() {
      return new renameFile_args(this);
    }

    @Override
    public void clear() {
      this.filePath = null;
      this.newPath = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto getFilePath() {
      return this.filePath;
    }

    public renameFile_args setFilePath(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getNewPath() {
      return this.newPath;
    }

    public renameFile_args setNewPath(@org.apache.thrift.annotation.Nullable java.lang.String newPath) {
      this.newPath = newPath;
      return this;
    }

    public void unsetNewPath() {
      this.newPath = null;
    }

    /** Returns true if field newPath is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPath() {
      return this.newPath != null;
    }

    public void setNewPathIsSet(boolean value) {
      if (!value) {
        this.newPath = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto)value);
        }
        break;

      case NEW_PATH:
        if (value == null) {
          unsetNewPath();
        } else {
          setNewPath((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_PATH:
        return getFilePath();

      case NEW_PATH:
        return getNewPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_PATH:
        return isSetFilePath();
      case NEW_PATH:
        return isSetNewPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof renameFile_args)
        return this.equals((renameFile_args)that);
      return false;
    }

    public boolean equals(renameFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      boolean this_present_newPath = true && this.isSetNewPath();
      boolean that_present_newPath = true && that.isSetNewPath();
      if (this_present_newPath || that_present_newPath) {
        if (!(this_present_newPath && that_present_newPath))
          return false;
        if (!this.newPath.equals(that.newPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
      if (isSetFilePath())
        hashCode = hashCode * 8191 + filePath.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewPath()) ? 131071 : 524287);
      if (isSetNewPath())
        hashCode = hashCode * 8191 + newPath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(renameFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFilePath(), other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNewPath(), other.isSetNewPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPath, other.newPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("renameFile_args(");
      boolean first = true;

      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPath:");
      if (this.newPath == null) {
        sb.append("null");
      } else {
        sb.append(this.newPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (filePath == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filePath' was not present! Struct: " + toString());
      }
      if (newPath == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'newPath' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (filePath != null) {
        filePath.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public renameFile_argsStandardScheme getScheme() {
        return new renameFile_argsStandardScheme();
      }
    }

    private static class renameFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<renameFile_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, renameFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filePath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
                struct.filePath.read(iprot);
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newPath = iprot.readString();
                struct.setNewPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, renameFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          struct.filePath.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.newPath != null) {
          oprot.writeFieldBegin(NEW_PATH_FIELD_DESC);
          oprot.writeString(struct.newPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public renameFile_argsTupleScheme getScheme() {
        return new renameFile_argsTupleScheme();
      }
    }

    private static class renameFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<renameFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.filePath.write(oprot);
        oprot.writeString(struct.newPath);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.filePath = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
        struct.filePath.read(iprot);
        struct.setFilePathIsSet(true);
        struct.newPath = iprot.readString();
        struct.setNewPathIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class renameFile_result implements org.apache.thrift.TBase<renameFile_result, renameFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<renameFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renameFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renameFile_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameFile_result.class, metaDataMap);
    }

    public renameFile_result() {
    }

    public renameFile_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameFile_result(renameFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto(other.success);
      }
    }

    @Override
    public renameFile_result deepCopy() {
      return new renameFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getSuccess() {
      return this.success;
    }

    public renameFile_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof renameFile_result)
        return this.equals((renameFile_result)that);
      return false;
    }

    public boolean equals(renameFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(renameFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("renameFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public renameFile_resultStandardScheme getScheme() {
        return new renameFile_resultStandardScheme();
      }
    }

    private static class renameFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<renameFile_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, renameFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, renameFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public renameFile_resultTupleScheme getScheme() {
        return new renameFile_resultTupleScheme();
      }
    }

    private static class renameFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<renameFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
