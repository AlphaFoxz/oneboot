/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.alphafoxz.oneboot.sdk.gen.thrift.ifaces;

@javax.annotation.processing.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-21")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SdkGenCodeIface {

  public interface Iface {

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto generateJavaRpc(long taskId) throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getTemplateContentByPath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto) throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto generateJavaApi(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto, java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> importJsonDto) throws org.apache.thrift.TException;

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto generateJavaDto(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void generateJavaRpc(long taskId, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void getTemplateContentByPath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void generateJavaApi(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto, java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> importJsonDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException;

    public void generateJavaDto(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto generateJavaRpc(long taskId) throws org.apache.thrift.TException
    {
      send_generateJavaRpc(taskId);
      return recv_generateJavaRpc();
    }

    public void send_generateJavaRpc(long taskId) throws org.apache.thrift.TException
    {
      generateJavaRpc_args args = new generateJavaRpc_args();
      args.setTaskId(taskId);
      sendBase("generateJavaRpc", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto recv_generateJavaRpc() throws org.apache.thrift.TException
    {
      generateJavaRpc_result result = new generateJavaRpc_result();
      receiveBase(result, "generateJavaRpc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateJavaRpc failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getTemplateContentByPath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto) throws org.apache.thrift.TException
    {
      send_getTemplateContentByPath(pathDto);
      return recv_getTemplateContentByPath();
    }

    public void send_getTemplateContentByPath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto) throws org.apache.thrift.TException
    {
      getTemplateContentByPath_args args = new getTemplateContentByPath_args();
      args.setPathDto(pathDto);
      sendBase("getTemplateContentByPath", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto recv_getTemplateContentByPath() throws org.apache.thrift.TException
    {
      getTemplateContentByPath_result result = new getTemplateContentByPath_result();
      receiveBase(result, "getTemplateContentByPath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTemplateContentByPath failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto generateJavaApi(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto, java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> importJsonDto) throws org.apache.thrift.TException
    {
      send_generateJavaApi(jsonDto, importJsonDto);
      return recv_generateJavaApi();
    }

    public void send_generateJavaApi(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto, java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> importJsonDto) throws org.apache.thrift.TException
    {
      generateJavaApi_args args = new generateJavaApi_args();
      args.setJsonDto(jsonDto);
      args.setImportJsonDto(importJsonDto);
      sendBase("generateJavaApi", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto recv_generateJavaApi() throws org.apache.thrift.TException
    {
      generateJavaApi_result result = new generateJavaApi_result();
      receiveBase(result, "generateJavaApi");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateJavaApi failed: unknown result");
    }

    @Override
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto generateJavaDto(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto) throws org.apache.thrift.TException
    {
      send_generateJavaDto(jsonDto);
      return recv_generateJavaDto();
    }

    public void send_generateJavaDto(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto) throws org.apache.thrift.TException
    {
      generateJavaDto_args args = new generateJavaDto_args();
      args.setJsonDto(jsonDto);
      sendBase("generateJavaDto", args);
    }

    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto recv_generateJavaDto() throws org.apache.thrift.TException
    {
      generateJavaDto_result result = new generateJavaDto_result();
      receiveBase(result, "generateJavaDto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateJavaDto failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void generateJavaRpc(long taskId, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateJavaRpc_call method_call = new generateJavaRpc_call(taskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateJavaRpc_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      private long taskId;
      public generateJavaRpc_call(long taskId, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateJavaRpc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateJavaRpc_args args = new generateJavaRpc_args();
        args.setTaskId(taskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateJavaRpc();
      }
    }

    @Override
    public void getTemplateContentByPath(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTemplateContentByPath_call method_call = new getTemplateContentByPath_call(pathDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTemplateContentByPath_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      private com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto;
      public getTemplateContentByPath_call(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pathDto = pathDto;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTemplateContentByPath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTemplateContentByPath_args args = new getTemplateContentByPath_args();
        args.setPathDto(pathDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTemplateContentByPath();
      }
    }

    @Override
    public void generateJavaApi(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto, java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> importJsonDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateJavaApi_call method_call = new generateJavaApi_call(jsonDto, importJsonDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateJavaApi_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      private com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto;
      private java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> importJsonDto;
      public generateJavaApi_call(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto, java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> importJsonDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonDto = jsonDto;
        this.importJsonDto = importJsonDto;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateJavaApi", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateJavaApi_args args = new generateJavaApi_args();
        args.setJsonDto(jsonDto);
        args.setImportJsonDto(importJsonDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateJavaApi();
      }
    }

    @Override
    public void generateJavaDto(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateJavaDto_call method_call = new generateJavaDto_call(jsonDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateJavaDto_call extends org.apache.thrift.async.TAsyncMethodCall<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      private com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto;
      public generateJavaDto_call(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonDto = jsonDto;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateJavaDto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateJavaDto_args args = new generateJavaDto_args();
        args.setJsonDto(jsonDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generateJavaDto();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("generateJavaRpc", new generateJavaRpc());
      processMap.put("getTemplateContentByPath", new getTemplateContentByPath());
      processMap.put("generateJavaApi", new generateJavaApi());
      processMap.put("generateJavaDto", new generateJavaDto());
      return processMap;
    }

    public static class generateJavaRpc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateJavaRpc_args> {
      public generateJavaRpc() {
        super("generateJavaRpc");
      }

      @Override
      public generateJavaRpc_args getEmptyArgsInstance() {
        return new generateJavaRpc_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public generateJavaRpc_result getResult(I iface, generateJavaRpc_args args) throws org.apache.thrift.TException {
        generateJavaRpc_result result = new generateJavaRpc_result();
        result.success = iface.generateJavaRpc(args.taskId);
        return result;
      }
    }

    public static class getTemplateContentByPath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTemplateContentByPath_args> {
      public getTemplateContentByPath() {
        super("getTemplateContentByPath");
      }

      @Override
      public getTemplateContentByPath_args getEmptyArgsInstance() {
        return new getTemplateContentByPath_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getTemplateContentByPath_result getResult(I iface, getTemplateContentByPath_args args) throws org.apache.thrift.TException {
        getTemplateContentByPath_result result = new getTemplateContentByPath_result();
        result.success = iface.getTemplateContentByPath(args.pathDto);
        return result;
      }
    }

    public static class generateJavaApi<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateJavaApi_args> {
      public generateJavaApi() {
        super("generateJavaApi");
      }

      @Override
      public generateJavaApi_args getEmptyArgsInstance() {
        return new generateJavaApi_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public generateJavaApi_result getResult(I iface, generateJavaApi_args args) throws org.apache.thrift.TException {
        generateJavaApi_result result = new generateJavaApi_result();
        result.success = iface.generateJavaApi(args.jsonDto, args.importJsonDto);
        return result;
      }
    }

    public static class generateJavaDto<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateJavaDto_args> {
      public generateJavaDto() {
        super("generateJavaDto");
      }

      @Override
      public generateJavaDto_args getEmptyArgsInstance() {
        return new generateJavaDto_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public generateJavaDto_result getResult(I iface, generateJavaDto_args args) throws org.apache.thrift.TException {
        generateJavaDto_result result = new generateJavaDto_result();
        result.success = iface.generateJavaDto(args.jsonDto);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("generateJavaRpc", new generateJavaRpc());
      processMap.put("getTemplateContentByPath", new getTemplateContentByPath());
      processMap.put("generateJavaApi", new generateJavaApi());
      processMap.put("generateJavaDto", new generateJavaDto());
      return processMap;
    }

    public static class generateJavaRpc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generateJavaRpc_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      public generateJavaRpc() {
        super("generateJavaRpc");
      }

      @Override
      public generateJavaRpc_args getEmptyArgsInstance() {
        return new generateJavaRpc_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto o) {
            generateJavaRpc_result result = new generateJavaRpc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            generateJavaRpc_result result = new generateJavaRpc_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, generateJavaRpc_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.generateJavaRpc(args.taskId,resultHandler);
      }
    }

    public static class getTemplateContentByPath<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTemplateContentByPath_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> {
      public getTemplateContentByPath() {
        super("getTemplateContentByPath");
      }

      @Override
      public getTemplateContentByPath_args getEmptyArgsInstance() {
        return new getTemplateContentByPath_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto o) {
            getTemplateContentByPath_result result = new getTemplateContentByPath_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTemplateContentByPath_result result = new getTemplateContentByPath_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getTemplateContentByPath_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.getTemplateContentByPath(args.pathDto,resultHandler);
      }
    }

    public static class generateJavaApi<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generateJavaApi_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      public generateJavaApi() {
        super("generateJavaApi");
      }

      @Override
      public generateJavaApi_args getEmptyArgsInstance() {
        return new generateJavaApi_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto o) {
            generateJavaApi_result result = new generateJavaApi_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            generateJavaApi_result result = new generateJavaApi_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, generateJavaApi_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.generateJavaApi(args.jsonDto, args.importJsonDto,resultHandler);
      }
    }

    public static class generateJavaDto<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generateJavaDto_args, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> {
      public generateJavaDto() {
        super("generateJavaDto");
      }

      @Override
      public generateJavaDto_args getEmptyArgsInstance() {
        return new generateJavaDto_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto>() { 
          @Override
          public void onComplete(com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto o) {
            generateJavaDto_result result = new generateJavaDto_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            generateJavaDto_result result = new generateJavaDto_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, generateJavaDto_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.generateJavaDto(args.jsonDto,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class generateJavaRpc_args implements org.apache.thrift.TBase<generateJavaRpc_args, generateJavaRpc_args._Fields>, java.io.Serializable, Cloneable, Comparable<generateJavaRpc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateJavaRpc_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new generateJavaRpc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new generateJavaRpc_argsTupleSchemeFactory();

    public long taskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateJavaRpc_args.class, metaDataMap);
    }

    public generateJavaRpc_args() {
    }

    public generateJavaRpc_args(
      long taskId)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateJavaRpc_args(generateJavaRpc_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
    }

    @Override
    public generateJavaRpc_args deepCopy() {
      return new generateJavaRpc_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
    }

    public long getTaskId() {
      return this.taskId;
    }

    public generateJavaRpc_args setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
      return this;
    }

    public void unsetTaskId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof generateJavaRpc_args)
        return this.equals((generateJavaRpc_args)that);
      return false;
    }

    public boolean equals(generateJavaRpc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(taskId);

      return hashCode;
    }

    @Override
    public int compareTo(generateJavaRpc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTaskId(), other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("generateJavaRpc_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'taskId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateJavaRpc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaRpc_argsStandardScheme getScheme() {
        return new generateJavaRpc_argsStandardScheme();
      }
    }

    private static class generateJavaRpc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<generateJavaRpc_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, generateJavaRpc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetTaskId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, generateJavaRpc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateJavaRpc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaRpc_argsTupleScheme getScheme() {
        return new generateJavaRpc_argsTupleScheme();
      }
    }

    private static class generateJavaRpc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<generateJavaRpc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateJavaRpc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeI64(struct.taskId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateJavaRpc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.taskId = iprot.readI64();
        struct.setTaskIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class generateJavaRpc_result implements org.apache.thrift.TBase<generateJavaRpc_result, generateJavaRpc_result._Fields>, java.io.Serializable, Cloneable, Comparable<generateJavaRpc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateJavaRpc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new generateJavaRpc_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new generateJavaRpc_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateJavaRpc_result.class, metaDataMap);
    }

    public generateJavaRpc_result() {
    }

    public generateJavaRpc_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateJavaRpc_result(generateJavaRpc_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto(other.success);
      }
    }

    @Override
    public generateJavaRpc_result deepCopy() {
      return new generateJavaRpc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getSuccess() {
      return this.success;
    }

    public generateJavaRpc_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof generateJavaRpc_result)
        return this.equals((generateJavaRpc_result)that);
      return false;
    }

    public boolean equals(generateJavaRpc_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(generateJavaRpc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("generateJavaRpc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateJavaRpc_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaRpc_resultStandardScheme getScheme() {
        return new generateJavaRpc_resultStandardScheme();
      }
    }

    private static class generateJavaRpc_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<generateJavaRpc_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, generateJavaRpc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, generateJavaRpc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateJavaRpc_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaRpc_resultTupleScheme getScheme() {
        return new generateJavaRpc_resultTupleScheme();
      }
    }

    private static class generateJavaRpc_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<generateJavaRpc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateJavaRpc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateJavaRpc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getTemplateContentByPath_args implements org.apache.thrift.TBase<getTemplateContentByPath_args, getTemplateContentByPath_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTemplateContentByPath_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTemplateContentByPath_args");

    private static final org.apache.thrift.protocol.TField PATH_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("pathDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTemplateContentByPath_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTemplateContentByPath_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH_DTO((short)1, "pathDto");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH_DTO
            return PATH_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH_DTO, new org.apache.thrift.meta_data.FieldMetaData("pathDto", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTemplateContentByPath_args.class, metaDataMap);
    }

    public getTemplateContentByPath_args() {
    }

    public getTemplateContentByPath_args(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto)
    {
      this();
      this.pathDto = pathDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTemplateContentByPath_args(getTemplateContentByPath_args other) {
      if (other.isSetPathDto()) {
        this.pathDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto(other.pathDto);
      }
    }

    @Override
    public getTemplateContentByPath_args deepCopy() {
      return new getTemplateContentByPath_args(this);
    }

    @Override
    public void clear() {
      this.pathDto = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto getPathDto() {
      return this.pathDto;
    }

    public getTemplateContentByPath_args setPathDto(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto pathDto) {
      this.pathDto = pathDto;
      return this;
    }

    public void unsetPathDto() {
      this.pathDto = null;
    }

    /** Returns true if field pathDto is set (has been assigned a value) and false otherwise */
    public boolean isSetPathDto() {
      return this.pathDto != null;
    }

    public void setPathDtoIsSet(boolean value) {
      if (!value) {
        this.pathDto = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PATH_DTO:
        if (value == null) {
          unsetPathDto();
        } else {
          setPathDto((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH_DTO:
        return getPathDto();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATH_DTO:
        return isSetPathDto();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getTemplateContentByPath_args)
        return this.equals((getTemplateContentByPath_args)that);
      return false;
    }

    public boolean equals(getTemplateContentByPath_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pathDto = true && this.isSetPathDto();
      boolean that_present_pathDto = true && that.isSetPathDto();
      if (this_present_pathDto || that_present_pathDto) {
        if (!(this_present_pathDto && that_present_pathDto))
          return false;
        if (!this.pathDto.equals(that.pathDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPathDto()) ? 131071 : 524287);
      if (isSetPathDto())
        hashCode = hashCode * 8191 + pathDto.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTemplateContentByPath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetPathDto(), other.isSetPathDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPathDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pathDto, other.pathDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTemplateContentByPath_args(");
      boolean first = true;

      sb.append("pathDto:");
      if (this.pathDto == null) {
        sb.append("null");
      } else {
        sb.append(this.pathDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (pathDto == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pathDto' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (pathDto != null) {
        pathDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTemplateContentByPath_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByPath_argsStandardScheme getScheme() {
        return new getTemplateContentByPath_argsStandardScheme();
      }
    }

    private static class getTemplateContentByPath_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTemplateContentByPath_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getTemplateContentByPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pathDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
                struct.pathDto.read(iprot);
                struct.setPathDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getTemplateContentByPath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pathDto != null) {
          oprot.writeFieldBegin(PATH_DTO_FIELD_DESC);
          struct.pathDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTemplateContentByPath_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByPath_argsTupleScheme getScheme() {
        return new getTemplateContentByPath_argsTupleScheme();
      }
    }

    private static class getTemplateContentByPath_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTemplateContentByPath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.pathDto.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.pathDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
        struct.pathDto.read(iprot);
        struct.setPathDtoIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getTemplateContentByPath_result implements org.apache.thrift.TBase<getTemplateContentByPath_result, getTemplateContentByPath_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTemplateContentByPath_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTemplateContentByPath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTemplateContentByPath_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTemplateContentByPath_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTemplateContentByPath_result.class, metaDataMap);
    }

    public getTemplateContentByPath_result() {
    }

    public getTemplateContentByPath_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTemplateContentByPath_result(getTemplateContentByPath_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto(other.success);
      }
    }

    @Override
    public getTemplateContentByPath_result deepCopy() {
      return new getTemplateContentByPath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto getSuccess() {
      return this.success;
    }

    public getTemplateContentByPath_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getTemplateContentByPath_result)
        return this.equals((getTemplateContentByPath_result)that);
      return false;
    }

    public boolean equals(getTemplateContentByPath_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTemplateContentByPath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTemplateContentByPath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTemplateContentByPath_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByPath_resultStandardScheme getScheme() {
        return new getTemplateContentByPath_resultStandardScheme();
      }
    }

    private static class getTemplateContentByPath_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTemplateContentByPath_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getTemplateContentByPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getTemplateContentByPath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTemplateContentByPath_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTemplateContentByPath_resultTupleScheme getScheme() {
        return new getTemplateContentByPath_resultTupleScheme();
      }
    }

    private static class getTemplateContentByPath_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTemplateContentByPath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTemplateContentByPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class generateJavaApi_args implements org.apache.thrift.TBase<generateJavaApi_args, generateJavaApi_args._Fields>, java.io.Serializable, Cloneable, Comparable<generateJavaApi_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateJavaApi_args");

    private static final org.apache.thrift.protocol.TField JSON_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IMPORT_JSON_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("importJsonDto", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new generateJavaApi_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new generateJavaApi_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> importJsonDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_DTO((short)1, "jsonDto"),
      IMPORT_JSON_DTO((short)2, "importJsonDto");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_DTO
            return JSON_DTO;
          case 2: // IMPORT_JSON_DTO
            return IMPORT_JSON_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_DTO, new org.apache.thrift.meta_data.FieldMetaData("jsonDto", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto.class)));
      tmpMap.put(_Fields.IMPORT_JSON_DTO, new org.apache.thrift.meta_data.FieldMetaData("importJsonDto", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateJavaApi_args.class, metaDataMap);
    }

    public generateJavaApi_args() {
    }

    public generateJavaApi_args(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto,
      java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> importJsonDto)
    {
      this();
      this.jsonDto = jsonDto;
      this.importJsonDto = importJsonDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateJavaApi_args(generateJavaApi_args other) {
      if (other.isSetJsonDto()) {
        this.jsonDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto(other.jsonDto);
      }
      if (other.isSetImportJsonDto()) {
        java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> __this__importJsonDto = new java.util.HashMap<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto>(other.importJsonDto.size());
        for (java.util.Map.Entry<java.lang.String, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> other_element : other.importJsonDto.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto other_element_value = other_element.getValue();

          java.lang.String __this__importJsonDto_copy_key = other_element_key;

          com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto __this__importJsonDto_copy_value = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto(other_element_value);

          __this__importJsonDto.put(__this__importJsonDto_copy_key, __this__importJsonDto_copy_value);
        }
        this.importJsonDto = __this__importJsonDto;
      }
    }

    @Override
    public generateJavaApi_args deepCopy() {
      return new generateJavaApi_args(this);
    }

    @Override
    public void clear() {
      this.jsonDto = null;
      this.importJsonDto = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto getJsonDto() {
      return this.jsonDto;
    }

    public generateJavaApi_args setJsonDto(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto) {
      this.jsonDto = jsonDto;
      return this;
    }

    public void unsetJsonDto() {
      this.jsonDto = null;
    }

    /** Returns true if field jsonDto is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonDto() {
      return this.jsonDto != null;
    }

    public void setJsonDtoIsSet(boolean value) {
      if (!value) {
        this.jsonDto = null;
      }
    }

    public int getImportJsonDtoSize() {
      return (this.importJsonDto == null) ? 0 : this.importJsonDto.size();
    }

    public void putToImportJsonDto(java.lang.String key, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto val) {
      if (this.importJsonDto == null) {
        this.importJsonDto = new java.util.HashMap<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto>();
      }
      this.importJsonDto.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> getImportJsonDto() {
      return this.importJsonDto;
    }

    public generateJavaApi_args setImportJsonDto(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> importJsonDto) {
      this.importJsonDto = importJsonDto;
      return this;
    }

    public void unsetImportJsonDto() {
      this.importJsonDto = null;
    }

    /** Returns true if field importJsonDto is set (has been assigned a value) and false otherwise */
    public boolean isSetImportJsonDto() {
      return this.importJsonDto != null;
    }

    public void setImportJsonDtoIsSet(boolean value) {
      if (!value) {
        this.importJsonDto = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case JSON_DTO:
        if (value == null) {
          unsetJsonDto();
        } else {
          setJsonDto((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto)value);
        }
        break;

      case IMPORT_JSON_DTO:
        if (value == null) {
          unsetImportJsonDto();
        } else {
          setImportJsonDto((java.util.Map<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_DTO:
        return getJsonDto();

      case IMPORT_JSON_DTO:
        return getImportJsonDto();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case JSON_DTO:
        return isSetJsonDto();
      case IMPORT_JSON_DTO:
        return isSetImportJsonDto();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof generateJavaApi_args)
        return this.equals((generateJavaApi_args)that);
      return false;
    }

    public boolean equals(generateJavaApi_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_jsonDto = true && this.isSetJsonDto();
      boolean that_present_jsonDto = true && that.isSetJsonDto();
      if (this_present_jsonDto || that_present_jsonDto) {
        if (!(this_present_jsonDto && that_present_jsonDto))
          return false;
        if (!this.jsonDto.equals(that.jsonDto))
          return false;
      }

      boolean this_present_importJsonDto = true && this.isSetImportJsonDto();
      boolean that_present_importJsonDto = true && that.isSetImportJsonDto();
      if (this_present_importJsonDto || that_present_importJsonDto) {
        if (!(this_present_importJsonDto && that_present_importJsonDto))
          return false;
        if (!this.importJsonDto.equals(that.importJsonDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetJsonDto()) ? 131071 : 524287);
      if (isSetJsonDto())
        hashCode = hashCode * 8191 + jsonDto.hashCode();

      hashCode = hashCode * 8191 + ((isSetImportJsonDto()) ? 131071 : 524287);
      if (isSetImportJsonDto())
        hashCode = hashCode * 8191 + importJsonDto.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(generateJavaApi_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetJsonDto(), other.isSetJsonDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonDto, other.jsonDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetImportJsonDto(), other.isSetImportJsonDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImportJsonDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.importJsonDto, other.importJsonDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("generateJavaApi_args(");
      boolean first = true;

      sb.append("jsonDto:");
      if (this.jsonDto == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonDto);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("importJsonDto:");
      if (this.importJsonDto == null) {
        sb.append("null");
      } else {
        sb.append(this.importJsonDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jsonDto == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jsonDto' was not present! Struct: " + toString());
      }
      if (importJsonDto == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'importJsonDto' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (jsonDto != null) {
        jsonDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateJavaApi_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaApi_argsStandardScheme getScheme() {
        return new generateJavaApi_argsStandardScheme();
      }
    }

    private static class generateJavaApi_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<generateJavaApi_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, generateJavaApi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jsonDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
                struct.jsonDto.read(iprot);
                struct.setJsonDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IMPORT_JSON_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.importJsonDto = new java.util.HashMap<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto>(2*_map0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                  @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
                    _val2.read(iprot);
                    struct.importJsonDto.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setImportJsonDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, generateJavaApi_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jsonDto != null) {
          oprot.writeFieldBegin(JSON_DTO_FIELD_DESC);
          struct.jsonDto.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.importJsonDto != null) {
          oprot.writeFieldBegin(IMPORT_JSON_DTO_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.importJsonDto.size()));
            for (java.util.Map.Entry<java.lang.String, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> _iter4 : struct.importJsonDto.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              _iter4.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateJavaApi_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaApi_argsTupleScheme getScheme() {
        return new generateJavaApi_argsTupleScheme();
      }
    }

    private static class generateJavaApi_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<generateJavaApi_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateJavaApi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.jsonDto.write(oprot);
        {
          oprot.writeI32(struct.importJsonDto.size());
          for (java.util.Map.Entry<java.lang.String, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto> _iter5 : struct.importJsonDto.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            _iter5.getValue().write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateJavaApi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.jsonDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
        struct.jsonDto.read(iprot);
        struct.setJsonDtoIsSet(true);
        {
          org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.importJsonDto = new java.util.HashMap<java.lang.String,com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto>(2*_map6.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key7;
          @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
            _val8.read(iprot);
            struct.importJsonDto.put(_key7, _val8);
          }
        }
        struct.setImportJsonDtoIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class generateJavaApi_result implements org.apache.thrift.TBase<generateJavaApi_result, generateJavaApi_result._Fields>, java.io.Serializable, Cloneable, Comparable<generateJavaApi_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateJavaApi_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new generateJavaApi_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new generateJavaApi_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateJavaApi_result.class, metaDataMap);
    }

    public generateJavaApi_result() {
    }

    public generateJavaApi_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateJavaApi_result(generateJavaApi_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto(other.success);
      }
    }

    @Override
    public generateJavaApi_result deepCopy() {
      return new generateJavaApi_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getSuccess() {
      return this.success;
    }

    public generateJavaApi_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof generateJavaApi_result)
        return this.equals((generateJavaApi_result)that);
      return false;
    }

    public boolean equals(generateJavaApi_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(generateJavaApi_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("generateJavaApi_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateJavaApi_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaApi_resultStandardScheme getScheme() {
        return new generateJavaApi_resultStandardScheme();
      }
    }

    private static class generateJavaApi_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<generateJavaApi_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, generateJavaApi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, generateJavaApi_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateJavaApi_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaApi_resultTupleScheme getScheme() {
        return new generateJavaApi_resultTupleScheme();
      }
    }

    private static class generateJavaApi_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<generateJavaApi_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateJavaApi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateJavaApi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class generateJavaDto_args implements org.apache.thrift.TBase<generateJavaDto_args, generateJavaDto_args._Fields>, java.io.Serializable, Cloneable, Comparable<generateJavaDto_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateJavaDto_args");

    private static final org.apache.thrift.protocol.TField JSON_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new generateJavaDto_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new generateJavaDto_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_DTO((short)1, "jsonDto");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_DTO
            return JSON_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_DTO, new org.apache.thrift.meta_data.FieldMetaData("jsonDto", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateJavaDto_args.class, metaDataMap);
    }

    public generateJavaDto_args() {
    }

    public generateJavaDto_args(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto)
    {
      this();
      this.jsonDto = jsonDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateJavaDto_args(generateJavaDto_args other) {
      if (other.isSetJsonDto()) {
        this.jsonDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto(other.jsonDto);
      }
    }

    @Override
    public generateJavaDto_args deepCopy() {
      return new generateJavaDto_args(this);
    }

    @Override
    public void clear() {
      this.jsonDto = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto getJsonDto() {
      return this.jsonDto;
    }

    public generateJavaDto_args setJsonDto(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto jsonDto) {
      this.jsonDto = jsonDto;
      return this;
    }

    public void unsetJsonDto() {
      this.jsonDto = null;
    }

    /** Returns true if field jsonDto is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonDto() {
      return this.jsonDto != null;
    }

    public void setJsonDtoIsSet(boolean value) {
      if (!value) {
        this.jsonDto = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case JSON_DTO:
        if (value == null) {
          unsetJsonDto();
        } else {
          setJsonDto((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_DTO:
        return getJsonDto();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case JSON_DTO:
        return isSetJsonDto();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof generateJavaDto_args)
        return this.equals((generateJavaDto_args)that);
      return false;
    }

    public boolean equals(generateJavaDto_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_jsonDto = true && this.isSetJsonDto();
      boolean that_present_jsonDto = true && that.isSetJsonDto();
      if (this_present_jsonDto || that_present_jsonDto) {
        if (!(this_present_jsonDto && that_present_jsonDto))
          return false;
        if (!this.jsonDto.equals(that.jsonDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetJsonDto()) ? 131071 : 524287);
      if (isSetJsonDto())
        hashCode = hashCode * 8191 + jsonDto.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(generateJavaDto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetJsonDto(), other.isSetJsonDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonDto, other.jsonDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("generateJavaDto_args(");
      boolean first = true;

      sb.append("jsonDto:");
      if (this.jsonDto == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jsonDto == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jsonDto' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (jsonDto != null) {
        jsonDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateJavaDto_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaDto_argsStandardScheme getScheme() {
        return new generateJavaDto_argsStandardScheme();
      }
    }

    private static class generateJavaDto_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<generateJavaDto_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, generateJavaDto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jsonDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
                struct.jsonDto.read(iprot);
                struct.setJsonDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, generateJavaDto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jsonDto != null) {
          oprot.writeFieldBegin(JSON_DTO_FIELD_DESC);
          struct.jsonDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateJavaDto_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaDto_argsTupleScheme getScheme() {
        return new generateJavaDto_argsTupleScheme();
      }
    }

    private static class generateJavaDto_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<generateJavaDto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateJavaDto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.jsonDto.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateJavaDto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.jsonDto = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkStringRequestDto();
        struct.jsonDto.read(iprot);
        struct.setJsonDtoIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class generateJavaDto_result implements org.apache.thrift.TBase<generateJavaDto_result, generateJavaDto_result._Fields>, java.io.Serializable, Cloneable, Comparable<generateJavaDto_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateJavaDto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new generateJavaDto_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new generateJavaDto_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateJavaDto_result.class, metaDataMap);
    }

    public generateJavaDto_result() {
    }

    public generateJavaDto_result(
      com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateJavaDto_result(generateJavaDto_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto(other.success);
      }
    }

    @Override
    public generateJavaDto_result deepCopy() {
      return new generateJavaDto_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto getSuccess() {
      return this.success;
    }

    public generateJavaDto_result setSuccess(@org.apache.thrift.annotation.Nullable com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof generateJavaDto_result)
        return this.equals((generateJavaDto_result)that);
      return false;
    }

    public boolean equals(generateJavaDto_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(generateJavaDto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("generateJavaDto_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateJavaDto_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaDto_resultStandardScheme getScheme() {
        return new generateJavaDto_resultStandardScheme();
      }
    }

    private static class generateJavaDto_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<generateJavaDto_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, generateJavaDto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, generateJavaDto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateJavaDto_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public generateJavaDto_resultTupleScheme getScheme() {
        return new generateJavaDto_resultTupleScheme();
      }
    }

    private static class generateJavaDto_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<generateJavaDto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateJavaDto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateJavaDto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.alphafoxz.oneboot.sdk.gen.thrift.dtos.SdkListResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
